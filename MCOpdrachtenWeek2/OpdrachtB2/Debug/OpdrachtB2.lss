
OpdrachtB2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000838  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000789  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000051d  00000000  00000000  000011c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000016e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00011de7  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000078  00000000  00000000  0001352f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000135a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000013e  00000000  00000000  000135c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	70 c0       	rjmp	.+224    	; 0xe6 <__vector_1>
   6:	00 00       	nop
   8:	59 c0       	rjmp	.+178    	; 0xbc <__vector_2>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	3a c0       	rjmp	.+116    	; 0x110 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <asf.h>

int main (void)
{
		// Init I/O
		DDRD = 0x00;			// PORTD(0:7) input
  9e:	11 ba       	out	0x11, r1	; 17
		DDRC = 0xFF;			// PORTC(0:7) output
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	84 bb       	out	0x14, r24	; 20
		
		// Init Interrupt hardware
		EICRA |= 0x0B;			// INT1 falling edge, INT2 rising edge
  a4:	ea e6       	ldi	r30, 0x6A	; 106
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	8b 60       	ori	r24, 0x0B	; 11
  ac:	80 83       	st	Z, r24
		EIMSK |= 0x00000110;		// Enable INT1 & INT2
  ae:	89 b7       	in	r24, 0x39	; 57
  b0:	80 61       	ori	r24, 0x10	; 16
  b2:	89 bf       	out	0x39, r24	; 57
		
		// Enable global interrupt system
		//SREG = 0x80;			// Of direct via SREG of via wrapper
		sei();
  b4:	78 94       	sei
		
		PORTC = 0x01; //turn on led on C0
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	85 bb       	out	0x15, r24	; 21
  ba:	ff cf       	rjmp	.-2      	; 0xba <main+0x1c>

000000bc <__vector_2>:
		while (1) {} //do nothing
		return 1;
}

ISR (INT1_vect)
{
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	8f 93       	push	r24
	//shift the led on forwards
	if(PORTC == 0x01) {
  c8:	85 b3       	in	r24, 0x15	; 21
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	19 f4       	brne	.+6      	; 0xd4 <__vector_2+0x18>
		PORTC = 0x80;
  ce:	80 e8       	ldi	r24, 0x80	; 128
  d0:	85 bb       	out	0x15, r24	; 21
  d2:	03 c0       	rjmp	.+6      	; 0xda <__vector_2+0x1e>
	} else PORTC >>= 1;
  d4:	85 b3       	in	r24, 0x15	; 21
  d6:	86 95       	lsr	r24
  d8:	85 bb       	out	0x15, r24	; 21
}
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <__vector_1>:

ISR (INT0_vect)
{
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	8f 93       	push	r24
	//shift the led on backwards
	if(PORTC == 0x80) {
  f2:	85 b3       	in	r24, 0x15	; 21
  f4:	80 38       	cpi	r24, 0x80	; 128
  f6:	19 f4       	brne	.+6      	; 0xfe <__vector_1+0x18>
		PORTC = 0x01;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	85 bb       	out	0x15, r24	; 21
  fc:	03 c0       	rjmp	.+6      	; 0x104 <__vector_1+0x1e>
	} else PORTC <<= 1;
  fe:	85 b3       	in	r24, 0x15	; 21
 100:	88 0f       	add	r24, r24
 102:	85 bb       	out	0x15, r24	; 21
}
 104:	8f 91       	pop	r24
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
