
OpdrachtB2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000082d  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000789  00000000  00000000  00000a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d9  00000000  00000000  000011ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00001688  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00011e57  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  00013527  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00013570  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000014a  00000000  00000000  00013588  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	4b c0       	rjmp	.+150    	; 0xc8 <__vector_12>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	37 c0       	rjmp	.+110    	; 0x10a <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#define TWENTYFIVEMILISECONDS 195

int main (void)
{	
		// Enable interrupts
		sei();
  9e:	78 94       	sei
	
		// Set up timer in PWM, Phase and frequency Correct mode.
		TCCR1A = 0b01010110;
  a0:	86 e5       	ldi	r24, 0x56	; 86
  a2:	8f bd       	out	0x2f, r24	; 47
	
		// Set up timer with prescaler 1024
		TCCR1B |= (1 << CS22) | (1 << CS20);
  a4:	8e b5       	in	r24, 0x2e	; 46
  a6:	85 60       	ori	r24, 0x05	; 5
  a8:	8e bd       	out	0x2e, r24	; 46
		
		// Reset timer 2
		TCNT1 = 0;
  aa:	1d bc       	out	0x2d, r1	; 45
  ac:	1c bc       	out	0x2c, r1	; 44
		
		// Set overflow over at least 40ms, now on 51.2ms
		ICR1 = 400;
  ae:	80 e9       	ldi	r24, 0x90	; 144
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	97 bd       	out	0x27, r25	; 39
  b4:	86 bd       	out	0x26, r24	; 38
		
		// Interrupt on 15ms
		OCR1A = FIFTEENMILISECONDS;
  b6:	85 e7       	ldi	r24, 0x75	; 117
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	9b bd       	out	0x2b, r25	; 43
  bc:	8a bd       	out	0x2a, r24	; 42
		
		// Enable compare interrupts
		TIMSK |= (1 << OCIE1A);
  be:	87 b7       	in	r24, 0x37	; 55
  c0:	80 61       	ori	r24, 0x10	; 16
  c2:	87 bf       	out	0x37, r24	; 55

		// Set PORTD.7 to output
		DDRD |= (1 << 7);
  c4:	8f 9a       	sbi	0x11, 7	; 17
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <main+0x28>

000000c8 <__vector_12>:
		for(;;);
	
}

ISR(TIMER1_COMPA_vect) 
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	if(OCR1A == FIFTEENMILISECONDS) {
  d6:	8a b5       	in	r24, 0x2a	; 42
  d8:	9b b5       	in	r25, 0x2b	; 43
  da:	85 37       	cpi	r24, 0x75	; 117
  dc:	91 05       	cpc	r25, r1
  de:	31 f4       	brne	.+12     	; 0xec <__vector_12+0x24>
		// Set timer interrupt on 25ms
		OCR1A = TWENTYFIVEMILISECONDS;
  e0:	83 ec       	ldi	r24, 0xC3	; 195
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	9b bd       	out	0x2b, r25	; 43
  e6:	8a bd       	out	0x2a, r24	; 42
		
		// Set PORTD.7 to high
		PORTD |= (1 << 7);
  e8:	97 9a       	sbi	0x12, 7	; 18
  ea:	07 c0       	rjmp	.+14     	; 0xfa <__vector_12+0x32>
		
	} else {
		// Set timer interrupt on 15ms
		OCR1A = FIFTEENMILISECONDS;
  ec:	85 e7       	ldi	r24, 0x75	; 117
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	9b bd       	out	0x2b, r25	; 43
  f2:	8a bd       	out	0x2a, r24	; 42
		
		// Set PORTD.7 to low
		PORTD ^= (1 << 7);
  f4:	82 b3       	in	r24, 0x12	; 18
  f6:	80 58       	subi	r24, 0x80	; 128
  f8:	82 bb       	out	0x12, r24	; 18
	}
	TCNT2 = 0;
  fa:	14 bc       	out	0x24, r1	; 36
}
  fc:	9f 91       	pop	r25
  fe:	8f 91       	pop	r24
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
