
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000c8c  00000d20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800206  00800206  00000d26  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001404  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e7a  00000000  00000000  0000225c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000078f  00000000  00000000  000030d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00003868  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000075c  00000000  00000000  00003a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a2  00000000  00000000  00004184  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00004826  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6f c0       	rjmp	.+222    	; 0x124 <__vector_17>
  46:	00 00       	nop
  48:	7c c0       	rjmp	.+248    	; 0x142 <__vector_18>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	77 c2       	rjmp	.+1262   	; 0x544 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a6 e0       	ldi	r26, 0x06	; 6
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a2 32       	cpi	r26, 0x22	; 34
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>

00000104 <__do_copy_data>:
 104:	12 e0       	ldi	r17, 0x02	; 2
 106:	a0 e0       	ldi	r26, 0x00	; 0
 108:	b2 e0       	ldi	r27, 0x02	; 2
 10a:	ec e8       	ldi	r30, 0x8C	; 140
 10c:	fc e0       	ldi	r31, 0x0C	; 12
 10e:	00 e0       	ldi	r16, 0x00	; 0
 110:	0b bf       	out	0x3b, r16	; 59
 112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x14>
 114:	07 90       	elpm	r0, Z+
 116:	0d 92       	st	X+, r0
 118:	a6 30       	cpi	r26, 0x06	; 6
 11a:	b1 07       	cpc	r27, r17
 11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0x10>
 11e:	bf d1       	rcall	.+894    	; 0x49e <main>
 120:	b3 c5       	rjmp	.+2918   	; 0xc88 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_17>:
}

bool is_same_value(int old_value, int new_value, int delta)
{
	return new_value < old_value + delta && new_value > old_value - delta;
}
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
 130:	85 b1       	in	r24, 0x05	; 5
 132:	80 58       	subi	r24, 0x80	; 128
 134:	85 b9       	out	0x05, r24	; 5
 136:	8f 91       	pop	r24
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <__vector_18>:
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	95 b1       	in	r25, 0x05	; 5
 152:	80 e4       	ldi	r24, 0x40	; 64
 154:	89 27       	eor	r24, r25
 156:	85 b9       	out	0x05, r24	; 5
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <calculate_timer_compare_time>:
 166:	20 e2       	ldi	r18, 0x20	; 32
 168:	3e e4       	ldi	r19, 0x4E	; 78
 16a:	a9 01       	movw	r20, r18
 16c:	48 1b       	sub	r20, r24
 16e:	59 0b       	sbc	r21, r25
 170:	ca 01       	movw	r24, r20
 172:	08 95       	ret

00000174 <set_speed_motor>:

void set_speed_motor(short percentage, short motor)
{	
	if(motor == LEFT_MOTOR)
 174:	61 15       	cp	r22, r1
 176:	71 05       	cpc	r23, r1
 178:	09 f0       	breq	.+2      	; 0x17c <set_speed_motor+0x8>
 17a:	59 c0       	rjmp	.+178    	; 0x22e <set_speed_motor+0xba>
	{
		if(percentage == 50)
 17c:	82 33       	cpi	r24, 0x32	; 50
 17e:	91 05       	cpc	r25, r1
 180:	41 f4       	brne	.+16     	; 0x192 <set_speed_motor+0x1e>
		{
			OCR1B = calculate_timer_compare_time(DRIVE_FULL_STOP_MS);
 182:	8c ed       	ldi	r24, 0xDC	; 220
 184:	95 e0       	ldi	r25, 0x05	; 5
 186:	ef df       	rcall	.-34     	; 0x166 <calculate_timer_compare_time>
 188:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 18c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
			return;
 190:	08 95       	ret
		}
		
		if(percentage > 50)
 192:	83 33       	cpi	r24, 0x33	; 51
 194:	91 05       	cpc	r25, r1
 196:	24 f1       	brlt	.+72     	; 0x1e0 <set_speed_motor+0x6c>
		{
			OCR1B = calculate_timer_compare_time(DRIVE_COUNTERCLOCKWISE_SLOWEST_MS + DRIVE_STEP_SIZE * ((percentage - 50) / 50.0 * 100));
 198:	bc 01       	movw	r22, r24
 19a:	62 53       	subi	r22, 0x32	; 50
 19c:	71 09       	sbc	r23, r1
 19e:	07 2e       	mov	r0, r23
 1a0:	00 0c       	add	r0, r0
 1a2:	88 0b       	sbc	r24, r24
 1a4:	99 0b       	sbc	r25, r25
 1a6:	60 d3       	rcall	.+1728   	; 0x868 <__floatsisf>
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	48 e4       	ldi	r20, 0x48	; 72
 1ae:	52 e4       	ldi	r21, 0x42	; 66
 1b0:	c0 d2       	rcall	.+1408   	; 0x732 <__divsf3>
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	48 ec       	ldi	r20, 0xC8	; 200
 1b8:	52 e4       	ldi	r21, 0x42	; 66
 1ba:	e2 d3       	rcall	.+1988   	; 0x980 <__mulsf3>
 1bc:	2d ec       	ldi	r18, 0xCD	; 205
 1be:	3c ec       	ldi	r19, 0xCC	; 204
 1c0:	4c ec       	ldi	r20, 0xCC	; 204
 1c2:	5f e3       	ldi	r21, 0x3F	; 63
 1c4:	dd d3       	rcall	.+1978   	; 0x980 <__mulsf3>
 1c6:	20 e0       	ldi	r18, 0x00	; 0
 1c8:	30 e8       	ldi	r19, 0x80	; 128
 1ca:	40 ec       	ldi	r20, 0xC0	; 192
 1cc:	54 e4       	ldi	r21, 0x44	; 68
 1ce:	4d d2       	rcall	.+1178   	; 0x66a <__addsf3>
 1d0:	18 d3       	rcall	.+1584   	; 0x802 <__fixsfsi>
 1d2:	cb 01       	movw	r24, r22
 1d4:	c8 df       	rcall	.-112    	; 0x166 <calculate_timer_compare_time>
 1d6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 1da:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
 1de:	08 95       	ret
		} 
		else
		{
			OCR1B = calculate_timer_compare_time(DRIVE_CLOCKWISE_SLOWEST_MS - DRIVE_STEP_SIZE * ((50 - percentage) / 50.0 * 100));
 1e0:	62 e3       	ldi	r22, 0x32	; 50
 1e2:	70 e0       	ldi	r23, 0x00	; 0
 1e4:	68 1b       	sub	r22, r24
 1e6:	79 0b       	sbc	r23, r25
 1e8:	07 2e       	mov	r0, r23
 1ea:	00 0c       	add	r0, r0
 1ec:	88 0b       	sbc	r24, r24
 1ee:	99 0b       	sbc	r25, r25
 1f0:	3b d3       	rcall	.+1654   	; 0x868 <__floatsisf>
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	48 e4       	ldi	r20, 0x48	; 72
 1f8:	52 e4       	ldi	r21, 0x42	; 66
 1fa:	9b d2       	rcall	.+1334   	; 0x732 <__divsf3>
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	48 ec       	ldi	r20, 0xC8	; 200
 202:	52 e4       	ldi	r21, 0x42	; 66
 204:	bd d3       	rcall	.+1914   	; 0x980 <__mulsf3>
 206:	2d ec       	ldi	r18, 0xCD	; 205
 208:	3c ec       	ldi	r19, 0xCC	; 204
 20a:	4c ec       	ldi	r20, 0xCC	; 204
 20c:	5f e3       	ldi	r21, 0x3F	; 63
 20e:	b8 d3       	rcall	.+1904   	; 0x980 <__mulsf3>
 210:	9b 01       	movw	r18, r22
 212:	ac 01       	movw	r20, r24
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	70 e8       	ldi	r23, 0x80	; 128
 218:	86 eb       	ldi	r24, 0xB6	; 182
 21a:	94 e4       	ldi	r25, 0x44	; 68
 21c:	25 d2       	rcall	.+1098   	; 0x668 <__subsf3>
 21e:	f1 d2       	rcall	.+1506   	; 0x802 <__fixsfsi>
 220:	cb 01       	movw	r24, r22
 222:	a1 df       	rcall	.-190    	; 0x166 <calculate_timer_compare_time>
 224:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 228:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
 22c:	08 95       	ret
		}
		
		return;
	}
	
	if(motor == RIGHT_MOTOR)
 22e:	61 30       	cpi	r22, 0x01	; 1
 230:	71 05       	cpc	r23, r1
 232:	09 f0       	breq	.+2      	; 0x236 <set_speed_motor+0xc2>
 234:	58 c0       	rjmp	.+176    	; 0x2e6 <set_speed_motor+0x172>
	{
		if(percentage == 50)
 236:	82 33       	cpi	r24, 0x32	; 50
 238:	91 05       	cpc	r25, r1
 23a:	41 f4       	brne	.+16     	; 0x24c <set_speed_motor+0xd8>
		{
			OCR1A = calculate_timer_compare_time(DRIVE_FULL_STOP_MS);
 23c:	8c ed       	ldi	r24, 0xDC	; 220
 23e:	95 e0       	ldi	r25, 0x05	; 5
 240:	92 df       	rcall	.-220    	; 0x166 <calculate_timer_compare_time>
 242:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 246:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			return;
		}
		
		if(percentage > 50)
 24a:	08 95       	ret
 24c:	83 33       	cpi	r24, 0x33	; 51
 24e:	91 05       	cpc	r25, r1
		{
			OCR1A = calculate_timer_compare_time(DRIVE_CLOCKWISE_SLOWEST_MS - DRIVE_STEP_SIZE * ((percentage - 50) / 50.0 * 100));
 250:	34 f1       	brlt	.+76     	; 0x29e <set_speed_motor+0x12a>
 252:	bc 01       	movw	r22, r24
 254:	62 53       	subi	r22, 0x32	; 50
 256:	71 09       	sbc	r23, r1
 258:	07 2e       	mov	r0, r23
 25a:	00 0c       	add	r0, r0
 25c:	88 0b       	sbc	r24, r24
 25e:	99 0b       	sbc	r25, r25
 260:	03 d3       	rcall	.+1542   	; 0x868 <__floatsisf>
 262:	20 e0       	ldi	r18, 0x00	; 0
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	48 e4       	ldi	r20, 0x48	; 72
 268:	52 e4       	ldi	r21, 0x42	; 66
 26a:	63 d2       	rcall	.+1222   	; 0x732 <__divsf3>
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	48 ec       	ldi	r20, 0xC8	; 200
 272:	52 e4       	ldi	r21, 0x42	; 66
 274:	85 d3       	rcall	.+1802   	; 0x980 <__mulsf3>
 276:	2d ec       	ldi	r18, 0xCD	; 205
 278:	3c ec       	ldi	r19, 0xCC	; 204
 27a:	4c ec       	ldi	r20, 0xCC	; 204
 27c:	5f e3       	ldi	r21, 0x3F	; 63
 27e:	80 d3       	rcall	.+1792   	; 0x980 <__mulsf3>
 280:	9b 01       	movw	r18, r22
 282:	ac 01       	movw	r20, r24
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	70 e8       	ldi	r23, 0x80	; 128
 288:	86 eb       	ldi	r24, 0xB6	; 182
 28a:	94 e4       	ldi	r25, 0x44	; 68
 28c:	ed d1       	rcall	.+986    	; 0x668 <__subsf3>
 28e:	b9 d2       	rcall	.+1394   	; 0x802 <__fixsfsi>
 290:	cb 01       	movw	r24, r22
 292:	69 df       	rcall	.-302    	; 0x166 <calculate_timer_compare_time>
 294:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 298:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		}
		else
		{
			OCR1A = calculate_timer_compare_time(DRIVE_COUNTERCLOCKWISE_SLOWEST_MS + DRIVE_STEP_SIZE * ((50 - percentage) / 50.0 * 100));
 29c:	08 95       	ret
 29e:	62 e3       	ldi	r22, 0x32	; 50
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	68 1b       	sub	r22, r24
 2a4:	79 0b       	sbc	r23, r25
 2a6:	07 2e       	mov	r0, r23
 2a8:	00 0c       	add	r0, r0
 2aa:	88 0b       	sbc	r24, r24
 2ac:	99 0b       	sbc	r25, r25
 2ae:	dc d2       	rcall	.+1464   	; 0x868 <__floatsisf>
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	48 e4       	ldi	r20, 0x48	; 72
 2b6:	52 e4       	ldi	r21, 0x42	; 66
 2b8:	3c d2       	rcall	.+1144   	; 0x732 <__divsf3>
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	48 ec       	ldi	r20, 0xC8	; 200
 2c0:	52 e4       	ldi	r21, 0x42	; 66
 2c2:	5e d3       	rcall	.+1724   	; 0x980 <__mulsf3>
 2c4:	2d ec       	ldi	r18, 0xCD	; 205
 2c6:	3c ec       	ldi	r19, 0xCC	; 204
 2c8:	4c ec       	ldi	r20, 0xCC	; 204
 2ca:	5f e3       	ldi	r21, 0x3F	; 63
 2cc:	59 d3       	rcall	.+1714   	; 0x980 <__mulsf3>
 2ce:	20 e0       	ldi	r18, 0x00	; 0
 2d0:	30 e8       	ldi	r19, 0x80	; 128
 2d2:	40 ec       	ldi	r20, 0xC0	; 192
 2d4:	54 e4       	ldi	r21, 0x44	; 68
 2d6:	c9 d1       	rcall	.+914    	; 0x66a <__addsf3>
 2d8:	94 d2       	rcall	.+1320   	; 0x802 <__fixsfsi>
 2da:	cb 01       	movw	r24, r22
 2dc:	44 df       	rcall	.-376    	; 0x166 <calculate_timer_compare_time>
 2de:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 2e2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 2e6:	08 95       	ret

000002e8 <set_speed>:
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
		}
	}
}

void set_speed(short percentage)
{
 2ec:	ec 01       	movw	r28, r24
	set_speed_motor(percentage, LEFT_MOTOR);
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	40 df       	rcall	.-384    	; 0x174 <set_speed_motor>
	set_speed_motor(percentage, RIGHT_MOTOR);
 2f4:	61 e0       	ldi	r22, 0x01	; 1
 2f6:	70 e0       	ldi	r23, 0x00	; 0
 2f8:	ce 01       	movw	r24, r28
 2fa:	3c df       	rcall	.-392    	; 0x174 <set_speed_motor>
}
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <turn>:

void turn(short speed_percentage, short turn_percentage)
{
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	8c 01       	movw	r16, r24
 30c:	eb 01       	movw	r28, r22
	 // Turn forward left.
	 if(turn_percentage < 50 && speed_percentage > 50)
 30e:	62 33       	cpi	r22, 0x32	; 50
 310:	71 05       	cpc	r23, r1
 312:	6c f4       	brge	.+26     	; 0x32e <turn+0x2c>
 314:	c3 97       	sbiw	r24, 0x33	; 51
 316:	5c f0       	brlt	.+22     	; 0x32e <turn+0x2c>
	 {
		 set_speed_motor(90, RIGHT_MOTOR);
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	8a e5       	ldi	r24, 0x5A	; 90
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	29 df       	rcall	.-430    	; 0x174 <set_speed_motor>
		 set_speed_motor(70, LEFT_MOTOR);
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	86 e4       	ldi	r24, 0x46	; 70
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	24 df       	rcall	.-440    	; 0x174 <set_speed_motor>
		 return;
 32c:	52 c0       	rjmp	.+164    	; 0x3d2 <turn+0xd0>
	 }
	 
	 // Turn forward right.
	 if(turn_percentage > 50 && speed_percentage > 50)
 32e:	c3 33       	cpi	r28, 0x33	; 51
 330:	d1 05       	cpc	r29, r1
 332:	74 f0       	brlt	.+28     	; 0x350 <turn+0x4e>
 334:	03 33       	cpi	r16, 0x33	; 51
 336:	11 05       	cpc	r17, r1
 338:	5c f0       	brlt	.+22     	; 0x350 <turn+0x4e>
	 {
		 set_speed_motor(70, RIGHT_MOTOR);
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	86 e4       	ldi	r24, 0x46	; 70
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	18 df       	rcall	.-464    	; 0x174 <set_speed_motor>
		 set_speed_motor(90, LEFT_MOTOR);
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	70 e0       	ldi	r23, 0x00	; 0
 348:	8a e5       	ldi	r24, 0x5A	; 90
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	13 df       	rcall	.-474    	; 0x174 <set_speed_motor>
		 return;
 34e:	41 c0       	rjmp	.+130    	; 0x3d2 <turn+0xd0>
	 }
	 
	 // Turn backward left.
	 if(turn_percentage < 50 && speed_percentage < 50)
 350:	c2 33       	cpi	r28, 0x32	; 50
 352:	d1 05       	cpc	r29, r1
 354:	74 f4       	brge	.+28     	; 0x372 <turn+0x70>
 356:	02 33       	cpi	r16, 0x32	; 50
 358:	11 05       	cpc	r17, r1
 35a:	5c f4       	brge	.+22     	; 0x372 <turn+0x70>
	 {
		 set_speed_motor(10, RIGHT_MOTOR);
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	70 e0       	ldi	r23, 0x00	; 0
 360:	8a e0       	ldi	r24, 0x0A	; 10
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	07 df       	rcall	.-498    	; 0x174 <set_speed_motor>
		 set_speed_motor(30, LEFT_MOTOR);
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	70 e0       	ldi	r23, 0x00	; 0
 36a:	8e e1       	ldi	r24, 0x1E	; 30
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	02 df       	rcall	.-508    	; 0x174 <set_speed_motor>
 370:	30 c0       	rjmp	.+96     	; 0x3d2 <turn+0xd0>
		 return;
 372:	c3 33       	cpi	r28, 0x33	; 51
	 }
	 
	 // Turn backward right.
	 if(turn_percentage > 50 && speed_percentage < 50)
 374:	d1 05       	cpc	r29, r1
 376:	74 f0       	brlt	.+28     	; 0x394 <turn+0x92>
 378:	02 33       	cpi	r16, 0x32	; 50
 37a:	11 05       	cpc	r17, r1
 37c:	5c f4       	brge	.+22     	; 0x394 <turn+0x92>
	 {
		 set_speed_motor(30, RIGHT_MOTOR);
 37e:	61 e0       	ldi	r22, 0x01	; 1
 380:	70 e0       	ldi	r23, 0x00	; 0
 382:	8e e1       	ldi	r24, 0x1E	; 30
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	f6 de       	rcall	.-532    	; 0x174 <set_speed_motor>
		 set_speed_motor(10, LEFT_MOTOR);
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	70 e0       	ldi	r23, 0x00	; 0
 38c:	8a e0       	ldi	r24, 0x0A	; 10
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	f1 de       	rcall	.-542    	; 0x174 <set_speed_motor>
 392:	1f c0       	rjmp	.+62     	; 0x3d2 <turn+0xd0>
		 return;
 394:	c2 33       	cpi	r28, 0x32	; 50
	 }
	 
	 // Tun stationary left.
	 if(turn_percentage < 50 && speed_percentage == 50)
 396:	d1 05       	cpc	r29, r1
 398:	6c f4       	brge	.+26     	; 0x3b4 <turn+0xb2>
 39a:	02 33       	cpi	r16, 0x32	; 50
 39c:	11 05       	cpc	r17, r1
 39e:	51 f4       	brne	.+20     	; 0x3b4 <turn+0xb2>
	 {
		 set_speed_motor(80, RIGHT_MOTOR);
 3a0:	61 e0       	ldi	r22, 0x01	; 1
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	80 e5       	ldi	r24, 0x50	; 80
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	e5 de       	rcall	.-566    	; 0x174 <set_speed_motor>
		 set_speed_motor(20, LEFT_MOTOR);
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	84 e1       	ldi	r24, 0x14	; 20
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	e0 de       	rcall	.-576    	; 0x174 <set_speed_motor>
	 }
	 
	 // Tun stationary right.
	 if(turn_percentage > 50 && speed_percentage == 50)
 3b4:	e3 97       	sbiw	r28, 0x33	; 51
 3b6:	6c f0       	brlt	.+26     	; 0x3d2 <turn+0xd0>
 3b8:	02 33       	cpi	r16, 0x32	; 50
 3ba:	11 05       	cpc	r17, r1
	 {
		 set_speed_motor(20, RIGHT_MOTOR);
 3bc:	51 f4       	brne	.+20     	; 0x3d2 <turn+0xd0>
 3be:	61 e0       	ldi	r22, 0x01	; 1
 3c0:	70 e0       	ldi	r23, 0x00	; 0
 3c2:	84 e1       	ldi	r24, 0x14	; 20
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	d6 de       	rcall	.-596    	; 0x174 <set_speed_motor>
		 set_speed_motor(80, LEFT_MOTOR);
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	80 e5       	ldi	r24, 0x50	; 80
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	d1 de       	rcall	.-606    	; 0x174 <set_speed_motor>
 3d2:	df 91       	pop	r29
	 }
}
 3d4:	cf 91       	pop	r28
 3d6:	1f 91       	pop	r17
 3d8:	0f 91       	pop	r16
 3da:	08 95       	ret

000003dc <control_drive>:
 3dc:	62 33       	cpi	r22, 0x32	; 50

void control_drive(short percentage_speed, short percentage_turn)
{	
	if(percentage_turn == 50)
 3de:	71 05       	cpc	r23, r1
 3e0:	11 f4       	brne	.+4      	; 0x3e6 <control_drive+0xa>
	{
		set_speed(percentage_speed);	
 3e2:	82 cf       	rjmp	.-252    	; 0x2e8 <set_speed>
		return;
	}
	
	turn(percentage_speed, percentage_turn);
 3e4:	08 95       	ret
 3e6:	8d cf       	rjmp	.-230    	; 0x302 <turn>
 3e8:	08 95       	ret

000003ea <init_servos>:
}

void init_servos()
{
	// Set up timer in PWM, Phase and frequency Correct mode.
	TCCR1A = 0b01010110;
 3ea:	86 e5       	ldi	r24, 0x56	; 86
 3ec:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>

	// Set up timer with pre-scaler = 8 and PWM, Phase and frequency correct mode.
	TCCR1B |= (1 << WGM13) | (1 << CS11);
 3f0:	e1 e8       	ldi	r30, 0x81	; 129
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	80 81       	ld	r24, Z
 3f6:	82 61       	ori	r24, 0x12	; 18
 3f8:	80 83       	st	Z, r24

	// Initialize counter.
	TCNT1 = 0;
 3fa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 3fe:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	ICR1 = 20000;
 402:	80 e2       	ldi	r24, 0x20	; 32
 404:	9e e4       	ldi	r25, 0x4E	; 78
 406:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7c0087>
 40a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7c0086>

	// Initialize compare values.
	OCR1A = calculate_timer_compare_time(DRIVE_FULL_STOP_MS);
 40e:	8c ed       	ldi	r24, 0xDC	; 220
 410:	95 e0       	ldi	r25, 0x05	; 5
 412:	a9 de       	rcall	.-686    	; 0x166 <calculate_timer_compare_time>
 414:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 418:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	OCR1B = calculate_timer_compare_time(DRIVE_FULL_STOP_MS);
 41c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 420:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>

	// Enable compare interrupts.
	TIMSK1 |= (1 << OCIE1A);
 424:	ef e6       	ldi	r30, 0x6F	; 111
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	82 60       	ori	r24, 0x02	; 2
 42c:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1B);
 42e:	80 81       	ld	r24, Z
 430:	84 60       	ori	r24, 0x04	; 4
 432:	80 83       	st	Z, r24
	
	DDRB |= (1 << 7) | (1 << 6);
 434:	84 b1       	in	r24, 0x04	; 4
 436:	80 6c       	ori	r24, 0xC0	; 192
 438:	84 b9       	out	0x04, r24	; 4
 43a:	08 95       	ret

0000043c <calculate_stick_percentage>:
#define STICK_CENTER 550
#define STICK_MAXIMUM 770

int calculate_stick_percentage(int pwm_value, int delta)
{
	if(STICK_MINIMUM >= pwm_value - delta) return 0;
 43c:	9c 01       	movw	r18, r24
 43e:	26 1b       	sub	r18, r22
 440:	37 0b       	sbc	r19, r23
 442:	2b 34       	cpi	r18, 0x4B	; 75
 444:	41 e0       	ldi	r20, 0x01	; 1
 446:	34 07       	cpc	r19, r20
 448:	0c f1       	brlt	.+66     	; 0x48c <calculate_stick_percentage+0x50>
	if(STICK_MAXIMUM <= pwm_value + delta) return 100;
 44a:	68 0f       	add	r22, r24
 44c:	79 1f       	adc	r23, r25
 44e:	62 30       	cpi	r22, 0x02	; 2
 450:	43 e0       	ldi	r20, 0x03	; 3
 452:	74 07       	cpc	r23, r20
 454:	f4 f4       	brge	.+60     	; 0x492 <calculate_stick_percentage+0x56>
	if(STICK_CENTER <= pwm_value + delta && STICK_CENTER >= pwm_value - delta) return 50;
 456:	66 32       	cpi	r22, 0x26	; 38
 458:	72 40       	sbci	r23, 0x02	; 2
 45a:	1c f0       	brlt	.+6      	; 0x462 <calculate_stick_percentage+0x26>
 45c:	27 32       	cpi	r18, 0x27	; 39
 45e:	32 40       	sbci	r19, 0x02	; 2
 460:	dc f0       	brlt	.+54     	; 0x498 <calculate_stick_percentage+0x5c>
 462:	bc 01       	movw	r22, r24
	
	return (pwm_value - STICK_MINIMUM) / 440.0 * 100;
 464:	6a 54       	subi	r22, 0x4A	; 74
 466:	71 40       	sbci	r23, 0x01	; 1
 468:	07 2e       	mov	r0, r23
 46a:	00 0c       	add	r0, r0
 46c:	88 0b       	sbc	r24, r24
 46e:	99 0b       	sbc	r25, r25
 470:	fb d1       	rcall	.+1014   	; 0x868 <__floatsisf>
 472:	20 e0       	ldi	r18, 0x00	; 0
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	4c ed       	ldi	r20, 0xDC	; 220
 478:	53 e4       	ldi	r21, 0x43	; 67
 47a:	5b d1       	rcall	.+694    	; 0x732 <__divsf3>
 47c:	20 e0       	ldi	r18, 0x00	; 0
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	48 ec       	ldi	r20, 0xC8	; 200
 482:	52 e4       	ldi	r21, 0x42	; 66
 484:	7d d2       	rcall	.+1274   	; 0x980 <__mulsf3>
 486:	bd d1       	rcall	.+890    	; 0x802 <__fixsfsi>
 488:	cb 01       	movw	r24, r22
 48a:	08 95       	ret
#define STICK_CENTER 550
#define STICK_MAXIMUM 770

int calculate_stick_percentage(int pwm_value, int delta)
{
	if(STICK_MINIMUM >= pwm_value - delta) return 0;
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	08 95       	ret
	if(STICK_MAXIMUM <= pwm_value + delta) return 100;
 492:	84 e6       	ldi	r24, 0x64	; 100
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	08 95       	ret
	if(STICK_CENTER <= pwm_value + delta && STICK_CENTER >= pwm_value - delta) return 50;
 498:	82 e3       	ldi	r24, 0x32	; 50
 49a:	90 e0       	ldi	r25, 0x00	; 0
	
	return (pwm_value - STICK_MINIMUM) / 440.0 * 100;
}
 49c:	08 95       	ret

0000049e <main>:

int main(void)
{
	sei(); // Enable interrupts.
 49e:	78 94       	sei
	DDRB = 0; // Initialize port to input to avoid frying receiver pins.
 4a0:	14 b8       	out	0x04, r1	; 4
	
	init_servos();
 4a2:	a3 df       	rcall	.-186    	; 0x3ea <init_servos>
	init_pwm();
 4a4:	26 d0       	rcall	.+76     	; 0x4f2 <init_pwm>
 4a6:	82 e0       	ldi	r24, 0x02	; 2
	
	int* throttle_value = malloc(sizeof(int));
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	cd d2       	rcall	.+1434   	; 0xa46 <malloc>
 4ac:	7c 01       	movw	r14, r24
 4ae:	82 e0       	ldi	r24, 0x02	; 2
	int* steering_value = malloc(sizeof(int));
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	c9 d2       	rcall	.+1426   	; 0xa46 <malloc>
 4b4:	8c 01       	movw	r16, r24
 4b6:	b7 01       	movw	r22, r14
	
	pwm_reader_add_pin(STICK_LEFT_UP_DOWN, throttle_value);
 4b8:	83 e0       	ldi	r24, 0x03	; 3
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	26 d0       	rcall	.+76     	; 0x50a <pwm_reader_add_pin>
 4be:	b8 01       	movw	r22, r16
	pwm_reader_add_pin(STICK_RIGHT_LEFT_RIGHT, steering_value);
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	22 d0       	rcall	.+68     	; 0x50a <pwm_reader_add_pin>
 4c6:	64 e1       	ldi	r22, 0x14	; 20

    while (1) 
    {
		control_drive(100 - calculate_stick_percentage(*throttle_value, 10), calculate_stick_percentage(*steering_value, 20));
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	f8 01       	movw	r30, r16
 4cc:	80 81       	ld	r24, Z
 4ce:	91 81       	ldd	r25, Z+1	; 0x01
 4d0:	b5 df       	rcall	.-150    	; 0x43c <calculate_stick_percentage>
 4d2:	ec 01       	movw	r28, r24
 4d4:	6a e0       	ldi	r22, 0x0A	; 10
 4d6:	70 e0       	ldi	r23, 0x00	; 0
 4d8:	f7 01       	movw	r30, r14
 4da:	80 81       	ld	r24, Z
 4dc:	91 81       	ldd	r25, Z+1	; 0x01
 4de:	ae df       	rcall	.-164    	; 0x43c <calculate_stick_percentage>
 4e0:	be 01       	movw	r22, r28
 4e2:	24 e6       	ldi	r18, 0x64	; 100
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	a9 01       	movw	r20, r18
 4e8:	48 1b       	sub	r20, r24
 4ea:	59 0b       	sbc	r21, r25
 4ec:	ca 01       	movw	r24, r20
 4ee:	76 df       	rcall	.-276    	; 0x3dc <control_drive>
 4f0:	ea cf       	rjmp	.-44     	; 0x4c6 <main+0x28>

000004f2 <init_pwm>:
{
	 // Set up timer in PWM, Phase and frequency Correct mode.
	 //TCCR2A = 0b01010110;

	 // Set up timer with pre-scaler = 8 and PWM, Phase and frequency correct mode.
	 TCCR0B |= (1 << WGM13) | (1 << CS11);
 4f2:	85 b5       	in	r24, 0x25	; 37
 4f4:	82 61       	ori	r24, 0x12	; 18
 4f6:	85 bd       	out	0x25, r24	; 37

	 // Initialize counter.
	 TCNT0 = 0;
 4f8:	16 bc       	out	0x26, r1	; 38
	 //ICR1 = 20000;

	 // Initialize compare values.
	 OCR0A = TICKS_PER_MEASUREMENT;
 4fa:	8a e0       	ldi	r24, 0x0A	; 10
 4fc:	87 bd       	out	0x27, r24	; 39

	 // Enable compare interrupts.
	 TIMSK0 |= (1 << OCIE0A);
 4fe:	ee e6       	ldi	r30, 0x6E	; 110
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	82 60       	ori	r24, 0x02	; 2
 506:	80 83       	st	Z, r24
 508:	08 95       	ret

0000050a <pwm_reader_add_pin>:
}

void pwm_reader_add_pin(int pin, int* out_ticks)
{
	input_pins[pin].output_pointer = out_ticks;
 50a:	fc 01       	movw	r30, r24
 50c:	ee 0f       	add	r30, r30
 50e:	ff 1f       	adc	r31, r31
 510:	8e 0f       	add	r24, r30
 512:	9f 1f       	adc	r25, r31
 514:	fc 01       	movw	r30, r24
 516:	ea 5f       	subi	r30, 0xFA	; 250
 518:	fd 4f       	sbci	r31, 0xFD	; 253
 51a:	71 83       	std	Z+1, r23	; 0x01
 51c:	60 83       	st	Z, r22
	input_pins[pin].state = false;
 51e:	12 82       	std	Z+2, r1	; 0x02
 520:	08 95       	ret

00000522 <pin_is_high>:
	
	Returns true if the given pin is high, else false.
*/
bool pin_is_high(short pin_number)
{
	return PINB & (1 << pin_number);
 522:	93 b1       	in	r25, 0x03	; 3
 524:	21 e0       	ldi	r18, 0x01	; 1
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	02 c0       	rjmp	.+4      	; 0x52e <pin_is_high+0xc>
 52a:	22 0f       	add	r18, r18
 52c:	33 1f       	adc	r19, r19
 52e:	8a 95       	dec	r24
 530:	e2 f7       	brpl	.-8      	; 0x52a <pin_is_high+0x8>
 532:	89 2f       	mov	r24, r25
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	28 23       	and	r18, r24
 538:	39 23       	and	r19, r25
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	23 2b       	or	r18, r19
 53e:	09 f4       	brne	.+2      	; 0x542 <pin_is_high+0x20>
 540:	80 e0       	ldi	r24, 0x00	; 0
}
 542:	08 95       	ret

00000544 <__vector_21>:

ISR(TIMER0_COMPA_vect)
{
 544:	1f 92       	push	r1
 546:	0f 92       	push	r0
 548:	0f b6       	in	r0, 0x3f	; 63
 54a:	0f 92       	push	r0
 54c:	11 24       	eor	r1, r1
 54e:	0b b6       	in	r0, 0x3b	; 59
 550:	0f 92       	push	r0
 552:	2f 93       	push	r18
 554:	3f 93       	push	r19
 556:	4f 93       	push	r20
 558:	5f 93       	push	r21
 55a:	6f 93       	push	r22
 55c:	7f 93       	push	r23
 55e:	8f 93       	push	r24
 560:	9f 93       	push	r25
 562:	af 93       	push	r26
 564:	bf 93       	push	r27
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	ef 93       	push	r30
 56c:	ff 93       	push	r31
	for(int i = 0; i < 4; i++)
 56e:	c0 e0       	ldi	r28, 0x00	; 0
 570:	d0 e0       	ldi	r29, 0x00	; 0
 572:	60 c0       	rjmp	.+192    	; 0x634 <__vector_21+0xf0>
	{
		if(input_pins[i].output_pointer == 0)
 574:	fe 01       	movw	r30, r28
 576:	ee 0f       	add	r30, r30
 578:	ff 1f       	adc	r31, r31
 57a:	ec 0f       	add	r30, r28
 57c:	fd 1f       	adc	r31, r29
 57e:	ea 5f       	subi	r30, 0xFA	; 250
 580:	fd 4f       	sbci	r31, 0xFD	; 253
 582:	80 81       	ld	r24, Z
 584:	91 81       	ldd	r25, Z+1	; 0x01
 586:	89 2b       	or	r24, r25
 588:	09 f4       	brne	.+2      	; 0x58c <__vector_21+0x48>
 58a:	53 c0       	rjmp	.+166    	; 0x632 <__vector_21+0xee>
		{
			continue;
		}
		
		if(pin_is_high(i))
 58c:	ce 01       	movw	r24, r28
 58e:	c9 df       	rcall	.-110    	; 0x522 <pin_is_high>
 590:	88 23       	and	r24, r24
 592:	89 f1       	breq	.+98     	; 0x5f6 <__vector_21+0xb2>
		{
			if(!input_pins[i].state)
 594:	fe 01       	movw	r30, r28
 596:	ee 0f       	add	r30, r30
 598:	ff 1f       	adc	r31, r31
 59a:	ec 0f       	add	r30, r28
 59c:	fd 1f       	adc	r31, r29
 59e:	ea 5f       	subi	r30, 0xFA	; 250
 5a0:	fd 4f       	sbci	r31, 0xFD	; 253
 5a2:	82 81       	ldd	r24, Z+2	; 0x02
 5a4:	81 11       	cpse	r24, r1
 5a6:	0e c0       	rjmp	.+28     	; 0x5c4 <__vector_21+0x80>
			{
				input_pins[i].state = true;
 5a8:	fe 01       	movw	r30, r28
 5aa:	ee 0f       	add	r30, r30
 5ac:	ff 1f       	adc	r31, r31
 5ae:	ec 0f       	add	r30, r28
 5b0:	fd 1f       	adc	r31, r29
 5b2:	ea 5f       	subi	r30, 0xFA	; 250
 5b4:	fd 4f       	sbci	r31, 0xFD	; 253
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	82 83       	std	Z+2, r24	; 0x02
				*input_pins[i].output_pointer = 0;				
 5ba:	01 90       	ld	r0, Z+
 5bc:	f0 81       	ld	r31, Z
 5be:	e0 2d       	mov	r30, r0
 5c0:	11 82       	std	Z+1, r1	; 0x01
 5c2:	10 82       	st	Z, r1
			}

			if(input_pins[i].state)
 5c4:	fe 01       	movw	r30, r28
 5c6:	ee 0f       	add	r30, r30
 5c8:	ff 1f       	adc	r31, r31
 5ca:	ec 0f       	add	r30, r28
 5cc:	fd 1f       	adc	r31, r29
 5ce:	ea 5f       	subi	r30, 0xFA	; 250
 5d0:	fd 4f       	sbci	r31, 0xFD	; 253
 5d2:	82 81       	ldd	r24, Z+2	; 0x02
 5d4:	88 23       	and	r24, r24
 5d6:	79 f0       	breq	.+30     	; 0x5f6 <__vector_21+0xb2>
			{
				*input_pins[i].output_pointer += TICKS_PER_MEASUREMENT;
 5d8:	fe 01       	movw	r30, r28
 5da:	ee 0f       	add	r30, r30
 5dc:	ff 1f       	adc	r31, r31
 5de:	ec 0f       	add	r30, r28
 5e0:	fd 1f       	adc	r31, r29
 5e2:	ea 5f       	subi	r30, 0xFA	; 250
 5e4:	fd 4f       	sbci	r31, 0xFD	; 253
 5e6:	01 90       	ld	r0, Z+
 5e8:	f0 81       	ld	r31, Z
 5ea:	e0 2d       	mov	r30, r0
 5ec:	80 81       	ld	r24, Z
 5ee:	91 81       	ldd	r25, Z+1	; 0x01
 5f0:	0a 96       	adiw	r24, 0x0a	; 10
 5f2:	91 83       	std	Z+1, r25	; 0x01
 5f4:	80 83       	st	Z, r24
			}			
		}

		if(!pin_is_high(i) && input_pins[i].state)
 5f6:	ce 01       	movw	r24, r28
 5f8:	94 df       	rcall	.-216    	; 0x522 <pin_is_high>
 5fa:	81 11       	cpse	r24, r1
 5fc:	1a c0       	rjmp	.+52     	; 0x632 <__vector_21+0xee>
 5fe:	fe 01       	movw	r30, r28
 600:	ee 0f       	add	r30, r30
 602:	ff 1f       	adc	r31, r31
 604:	ec 0f       	add	r30, r28
 606:	fd 1f       	adc	r31, r29
 608:	ea 5f       	subi	r30, 0xFA	; 250
 60a:	fd 4f       	sbci	r31, 0xFD	; 253
 60c:	82 81       	ldd	r24, Z+2	; 0x02
 60e:	88 23       	and	r24, r24
 610:	81 f0       	breq	.+32     	; 0x632 <__vector_21+0xee>
		{
			*input_pins[i].output_pointer += TICKS_PER_MEASUREMENT;
 612:	fe 01       	movw	r30, r28
 614:	ee 0f       	add	r30, r30
 616:	ff 1f       	adc	r31, r31
 618:	ec 0f       	add	r30, r28
 61a:	fd 1f       	adc	r31, r29
 61c:	ea 5f       	subi	r30, 0xFA	; 250
 61e:	fd 4f       	sbci	r31, 0xFD	; 253
 620:	a0 81       	ld	r26, Z
 622:	b1 81       	ldd	r27, Z+1	; 0x01
 624:	8d 91       	ld	r24, X+
 626:	9c 91       	ld	r25, X
 628:	11 97       	sbiw	r26, 0x01	; 1
 62a:	0a 96       	adiw	r24, 0x0a	; 10
 62c:	8d 93       	st	X+, r24
 62e:	9c 93       	st	X, r25
			input_pins[i].state = false;
 630:	12 82       	std	Z+2, r1	; 0x02
	return PINB & (1 << pin_number);
}

ISR(TIMER0_COMPA_vect)
{
	for(int i = 0; i < 4; i++)
 632:	21 96       	adiw	r28, 0x01	; 1
 634:	c4 30       	cpi	r28, 0x04	; 4
 636:	d1 05       	cpc	r29, r1
 638:	0c f4       	brge	.+2      	; 0x63c <__vector_21+0xf8>
 63a:	9c cf       	rjmp	.-200    	; 0x574 <__vector_21+0x30>
			*input_pins[i].output_pointer += TICKS_PER_MEASUREMENT;
			input_pins[i].state = false;
		}
	}

	TCNT0 = 0;
 63c:	16 bc       	out	0x26, r1	; 38
}
 63e:	ff 91       	pop	r31
 640:	ef 91       	pop	r30
 642:	df 91       	pop	r29
 644:	cf 91       	pop	r28
 646:	bf 91       	pop	r27
 648:	af 91       	pop	r26
 64a:	9f 91       	pop	r25
 64c:	8f 91       	pop	r24
 64e:	7f 91       	pop	r23
 650:	6f 91       	pop	r22
 652:	5f 91       	pop	r21
 654:	4f 91       	pop	r20
 656:	3f 91       	pop	r19
 658:	2f 91       	pop	r18
 65a:	0f 90       	pop	r0
 65c:	0b be       	out	0x3b, r0	; 59
 65e:	0f 90       	pop	r0
 660:	0f be       	out	0x3f, r0	; 63
 662:	0f 90       	pop	r0
 664:	1f 90       	pop	r1
 666:	18 95       	reti

00000668 <__subsf3>:
 668:	50 58       	subi	r21, 0x80	; 128

0000066a <__addsf3>:
 66a:	bb 27       	eor	r27, r27
 66c:	aa 27       	eor	r26, r26
 66e:	0e d0       	rcall	.+28     	; 0x68c <__addsf3x>
 670:	4d c1       	rjmp	.+666    	; 0x90c <__fp_round>
 672:	3e d1       	rcall	.+636    	; 0x8f0 <__fp_pscA>
 674:	30 f0       	brcs	.+12     	; 0x682 <__addsf3+0x18>
 676:	43 d1       	rcall	.+646    	; 0x8fe <__fp_pscB>
 678:	20 f0       	brcs	.+8      	; 0x682 <__addsf3+0x18>
 67a:	31 f4       	brne	.+12     	; 0x688 <__addsf3+0x1e>
 67c:	9f 3f       	cpi	r25, 0xFF	; 255
 67e:	11 f4       	brne	.+4      	; 0x684 <__addsf3+0x1a>
 680:	1e f4       	brtc	.+6      	; 0x688 <__addsf3+0x1e>
 682:	33 c1       	rjmp	.+614    	; 0x8ea <__fp_nan>
 684:	0e f4       	brtc	.+2      	; 0x688 <__addsf3+0x1e>
 686:	e0 95       	com	r30
 688:	e7 fb       	bst	r30, 7
 68a:	29 c1       	rjmp	.+594    	; 0x8de <__fp_inf>

0000068c <__addsf3x>:
 68c:	e9 2f       	mov	r30, r25
 68e:	4f d1       	rcall	.+670    	; 0x92e <__fp_split3>
 690:	80 f3       	brcs	.-32     	; 0x672 <__addsf3+0x8>
 692:	ba 17       	cp	r27, r26
 694:	62 07       	cpc	r22, r18
 696:	73 07       	cpc	r23, r19
 698:	84 07       	cpc	r24, r20
 69a:	95 07       	cpc	r25, r21
 69c:	18 f0       	brcs	.+6      	; 0x6a4 <__addsf3x+0x18>
 69e:	71 f4       	brne	.+28     	; 0x6bc <__addsf3x+0x30>
 6a0:	9e f5       	brtc	.+102    	; 0x708 <__addsf3x+0x7c>
 6a2:	67 c1       	rjmp	.+718    	; 0x972 <__fp_zero>
 6a4:	0e f4       	brtc	.+2      	; 0x6a8 <__addsf3x+0x1c>
 6a6:	e0 95       	com	r30
 6a8:	0b 2e       	mov	r0, r27
 6aa:	ba 2f       	mov	r27, r26
 6ac:	a0 2d       	mov	r26, r0
 6ae:	0b 01       	movw	r0, r22
 6b0:	b9 01       	movw	r22, r18
 6b2:	90 01       	movw	r18, r0
 6b4:	0c 01       	movw	r0, r24
 6b6:	ca 01       	movw	r24, r20
 6b8:	a0 01       	movw	r20, r0
 6ba:	11 24       	eor	r1, r1
 6bc:	ff 27       	eor	r31, r31
 6be:	59 1b       	sub	r21, r25
 6c0:	99 f0       	breq	.+38     	; 0x6e8 <__addsf3x+0x5c>
 6c2:	59 3f       	cpi	r21, 0xF9	; 249
 6c4:	50 f4       	brcc	.+20     	; 0x6da <__addsf3x+0x4e>
 6c6:	50 3e       	cpi	r21, 0xE0	; 224
 6c8:	68 f1       	brcs	.+90     	; 0x724 <__addsf3x+0x98>
 6ca:	1a 16       	cp	r1, r26
 6cc:	f0 40       	sbci	r31, 0x00	; 0
 6ce:	a2 2f       	mov	r26, r18
 6d0:	23 2f       	mov	r18, r19
 6d2:	34 2f       	mov	r19, r20
 6d4:	44 27       	eor	r20, r20
 6d6:	58 5f       	subi	r21, 0xF8	; 248
 6d8:	f3 cf       	rjmp	.-26     	; 0x6c0 <__addsf3x+0x34>
 6da:	46 95       	lsr	r20
 6dc:	37 95       	ror	r19
 6de:	27 95       	ror	r18
 6e0:	a7 95       	ror	r26
 6e2:	f0 40       	sbci	r31, 0x00	; 0
 6e4:	53 95       	inc	r21
 6e6:	c9 f7       	brne	.-14     	; 0x6da <__addsf3x+0x4e>
 6e8:	7e f4       	brtc	.+30     	; 0x708 <__addsf3x+0x7c>
 6ea:	1f 16       	cp	r1, r31
 6ec:	ba 0b       	sbc	r27, r26
 6ee:	62 0b       	sbc	r22, r18
 6f0:	73 0b       	sbc	r23, r19
 6f2:	84 0b       	sbc	r24, r20
 6f4:	ba f0       	brmi	.+46     	; 0x724 <__addsf3x+0x98>
 6f6:	91 50       	subi	r25, 0x01	; 1
 6f8:	a1 f0       	breq	.+40     	; 0x722 <__addsf3x+0x96>
 6fa:	ff 0f       	add	r31, r31
 6fc:	bb 1f       	adc	r27, r27
 6fe:	66 1f       	adc	r22, r22
 700:	77 1f       	adc	r23, r23
 702:	88 1f       	adc	r24, r24
 704:	c2 f7       	brpl	.-16     	; 0x6f6 <__addsf3x+0x6a>
 706:	0e c0       	rjmp	.+28     	; 0x724 <__addsf3x+0x98>
 708:	ba 0f       	add	r27, r26
 70a:	62 1f       	adc	r22, r18
 70c:	73 1f       	adc	r23, r19
 70e:	84 1f       	adc	r24, r20
 710:	48 f4       	brcc	.+18     	; 0x724 <__addsf3x+0x98>
 712:	87 95       	ror	r24
 714:	77 95       	ror	r23
 716:	67 95       	ror	r22
 718:	b7 95       	ror	r27
 71a:	f7 95       	ror	r31
 71c:	9e 3f       	cpi	r25, 0xFE	; 254
 71e:	08 f0       	brcs	.+2      	; 0x722 <__addsf3x+0x96>
 720:	b3 cf       	rjmp	.-154    	; 0x688 <__addsf3+0x1e>
 722:	93 95       	inc	r25
 724:	88 0f       	add	r24, r24
 726:	08 f0       	brcs	.+2      	; 0x72a <__addsf3x+0x9e>
 728:	99 27       	eor	r25, r25
 72a:	ee 0f       	add	r30, r30
 72c:	97 95       	ror	r25
 72e:	87 95       	ror	r24
 730:	08 95       	ret

00000732 <__divsf3>:
 732:	0c d0       	rcall	.+24     	; 0x74c <__divsf3x>
 734:	eb c0       	rjmp	.+470    	; 0x90c <__fp_round>
 736:	e3 d0       	rcall	.+454    	; 0x8fe <__fp_pscB>
 738:	40 f0       	brcs	.+16     	; 0x74a <__divsf3+0x18>
 73a:	da d0       	rcall	.+436    	; 0x8f0 <__fp_pscA>
 73c:	30 f0       	brcs	.+12     	; 0x74a <__divsf3+0x18>
 73e:	21 f4       	brne	.+8      	; 0x748 <__divsf3+0x16>
 740:	5f 3f       	cpi	r21, 0xFF	; 255
 742:	19 f0       	breq	.+6      	; 0x74a <__divsf3+0x18>
 744:	cc c0       	rjmp	.+408    	; 0x8de <__fp_inf>
 746:	51 11       	cpse	r21, r1
 748:	15 c1       	rjmp	.+554    	; 0x974 <__fp_szero>
 74a:	cf c0       	rjmp	.+414    	; 0x8ea <__fp_nan>

0000074c <__divsf3x>:
 74c:	f0 d0       	rcall	.+480    	; 0x92e <__fp_split3>
 74e:	98 f3       	brcs	.-26     	; 0x736 <__divsf3+0x4>

00000750 <__divsf3_pse>:
 750:	99 23       	and	r25, r25
 752:	c9 f3       	breq	.-14     	; 0x746 <__divsf3+0x14>
 754:	55 23       	and	r21, r21
 756:	b1 f3       	breq	.-20     	; 0x744 <__divsf3+0x12>
 758:	95 1b       	sub	r25, r21
 75a:	55 0b       	sbc	r21, r21
 75c:	bb 27       	eor	r27, r27
 75e:	aa 27       	eor	r26, r26
 760:	62 17       	cp	r22, r18
 762:	73 07       	cpc	r23, r19
 764:	84 07       	cpc	r24, r20
 766:	38 f0       	brcs	.+14     	; 0x776 <__divsf3_pse+0x26>
 768:	9f 5f       	subi	r25, 0xFF	; 255
 76a:	5f 4f       	sbci	r21, 0xFF	; 255
 76c:	22 0f       	add	r18, r18
 76e:	33 1f       	adc	r19, r19
 770:	44 1f       	adc	r20, r20
 772:	aa 1f       	adc	r26, r26
 774:	a9 f3       	breq	.-22     	; 0x760 <__divsf3_pse+0x10>
 776:	33 d0       	rcall	.+102    	; 0x7de <__divsf3_pse+0x8e>
 778:	0e 2e       	mov	r0, r30
 77a:	3a f0       	brmi	.+14     	; 0x78a <__divsf3_pse+0x3a>
 77c:	e0 e8       	ldi	r30, 0x80	; 128
 77e:	30 d0       	rcall	.+96     	; 0x7e0 <__divsf3_pse+0x90>
 780:	91 50       	subi	r25, 0x01	; 1
 782:	50 40       	sbci	r21, 0x00	; 0
 784:	e6 95       	lsr	r30
 786:	00 1c       	adc	r0, r0
 788:	ca f7       	brpl	.-14     	; 0x77c <__divsf3_pse+0x2c>
 78a:	29 d0       	rcall	.+82     	; 0x7de <__divsf3_pse+0x8e>
 78c:	fe 2f       	mov	r31, r30
 78e:	27 d0       	rcall	.+78     	; 0x7de <__divsf3_pse+0x8e>
 790:	66 0f       	add	r22, r22
 792:	77 1f       	adc	r23, r23
 794:	88 1f       	adc	r24, r24
 796:	bb 1f       	adc	r27, r27
 798:	26 17       	cp	r18, r22
 79a:	37 07       	cpc	r19, r23
 79c:	48 07       	cpc	r20, r24
 79e:	ab 07       	cpc	r26, r27
 7a0:	b0 e8       	ldi	r27, 0x80	; 128
 7a2:	09 f0       	breq	.+2      	; 0x7a6 <__divsf3_pse+0x56>
 7a4:	bb 0b       	sbc	r27, r27
 7a6:	80 2d       	mov	r24, r0
 7a8:	bf 01       	movw	r22, r30
 7aa:	ff 27       	eor	r31, r31
 7ac:	93 58       	subi	r25, 0x83	; 131
 7ae:	5f 4f       	sbci	r21, 0xFF	; 255
 7b0:	2a f0       	brmi	.+10     	; 0x7bc <__divsf3_pse+0x6c>
 7b2:	9e 3f       	cpi	r25, 0xFE	; 254
 7b4:	51 05       	cpc	r21, r1
 7b6:	68 f0       	brcs	.+26     	; 0x7d2 <__divsf3_pse+0x82>
 7b8:	92 c0       	rjmp	.+292    	; 0x8de <__fp_inf>
 7ba:	dc c0       	rjmp	.+440    	; 0x974 <__fp_szero>
 7bc:	5f 3f       	cpi	r21, 0xFF	; 255
 7be:	ec f3       	brlt	.-6      	; 0x7ba <__divsf3_pse+0x6a>
 7c0:	98 3e       	cpi	r25, 0xE8	; 232
 7c2:	dc f3       	brlt	.-10     	; 0x7ba <__divsf3_pse+0x6a>
 7c4:	86 95       	lsr	r24
 7c6:	77 95       	ror	r23
 7c8:	67 95       	ror	r22
 7ca:	b7 95       	ror	r27
 7cc:	f7 95       	ror	r31
 7ce:	9f 5f       	subi	r25, 0xFF	; 255
 7d0:	c9 f7       	brne	.-14     	; 0x7c4 <__divsf3_pse+0x74>
 7d2:	88 0f       	add	r24, r24
 7d4:	91 1d       	adc	r25, r1
 7d6:	96 95       	lsr	r25
 7d8:	87 95       	ror	r24
 7da:	97 f9       	bld	r25, 7
 7dc:	08 95       	ret
 7de:	e1 e0       	ldi	r30, 0x01	; 1
 7e0:	66 0f       	add	r22, r22
 7e2:	77 1f       	adc	r23, r23
 7e4:	88 1f       	adc	r24, r24
 7e6:	bb 1f       	adc	r27, r27
 7e8:	62 17       	cp	r22, r18
 7ea:	73 07       	cpc	r23, r19
 7ec:	84 07       	cpc	r24, r20
 7ee:	ba 07       	cpc	r27, r26
 7f0:	20 f0       	brcs	.+8      	; 0x7fa <__divsf3_pse+0xaa>
 7f2:	62 1b       	sub	r22, r18
 7f4:	73 0b       	sbc	r23, r19
 7f6:	84 0b       	sbc	r24, r20
 7f8:	ba 0b       	sbc	r27, r26
 7fa:	ee 1f       	adc	r30, r30
 7fc:	88 f7       	brcc	.-30     	; 0x7e0 <__divsf3_pse+0x90>
 7fe:	e0 95       	com	r30
 800:	08 95       	ret

00000802 <__fixsfsi>:
 802:	04 d0       	rcall	.+8      	; 0x80c <__fixunssfsi>
 804:	68 94       	set
 806:	b1 11       	cpse	r27, r1
 808:	b5 c0       	rjmp	.+362    	; 0x974 <__fp_szero>
 80a:	08 95       	ret

0000080c <__fixunssfsi>:
 80c:	98 d0       	rcall	.+304    	; 0x93e <__fp_splitA>
 80e:	88 f0       	brcs	.+34     	; 0x832 <__fixunssfsi+0x26>
 810:	9f 57       	subi	r25, 0x7F	; 127
 812:	90 f0       	brcs	.+36     	; 0x838 <__fixunssfsi+0x2c>
 814:	b9 2f       	mov	r27, r25
 816:	99 27       	eor	r25, r25
 818:	b7 51       	subi	r27, 0x17	; 23
 81a:	a0 f0       	brcs	.+40     	; 0x844 <__fixunssfsi+0x38>
 81c:	d1 f0       	breq	.+52     	; 0x852 <__fixunssfsi+0x46>
 81e:	66 0f       	add	r22, r22
 820:	77 1f       	adc	r23, r23
 822:	88 1f       	adc	r24, r24
 824:	99 1f       	adc	r25, r25
 826:	1a f0       	brmi	.+6      	; 0x82e <__fixunssfsi+0x22>
 828:	ba 95       	dec	r27
 82a:	c9 f7       	brne	.-14     	; 0x81e <__fixunssfsi+0x12>
 82c:	12 c0       	rjmp	.+36     	; 0x852 <__fixunssfsi+0x46>
 82e:	b1 30       	cpi	r27, 0x01	; 1
 830:	81 f0       	breq	.+32     	; 0x852 <__fixunssfsi+0x46>
 832:	9f d0       	rcall	.+318    	; 0x972 <__fp_zero>
 834:	b1 e0       	ldi	r27, 0x01	; 1
 836:	08 95       	ret
 838:	9c c0       	rjmp	.+312    	; 0x972 <__fp_zero>
 83a:	67 2f       	mov	r22, r23
 83c:	78 2f       	mov	r23, r24
 83e:	88 27       	eor	r24, r24
 840:	b8 5f       	subi	r27, 0xF8	; 248
 842:	39 f0       	breq	.+14     	; 0x852 <__fixunssfsi+0x46>
 844:	b9 3f       	cpi	r27, 0xF9	; 249
 846:	cc f3       	brlt	.-14     	; 0x83a <__fixunssfsi+0x2e>
 848:	86 95       	lsr	r24
 84a:	77 95       	ror	r23
 84c:	67 95       	ror	r22
 84e:	b3 95       	inc	r27
 850:	d9 f7       	brne	.-10     	; 0x848 <__fixunssfsi+0x3c>
 852:	3e f4       	brtc	.+14     	; 0x862 <__fixunssfsi+0x56>
 854:	90 95       	com	r25
 856:	80 95       	com	r24
 858:	70 95       	com	r23
 85a:	61 95       	neg	r22
 85c:	7f 4f       	sbci	r23, 0xFF	; 255
 85e:	8f 4f       	sbci	r24, 0xFF	; 255
 860:	9f 4f       	sbci	r25, 0xFF	; 255
 862:	08 95       	ret

00000864 <__floatunsisf>:
 864:	e8 94       	clt
 866:	09 c0       	rjmp	.+18     	; 0x87a <__floatsisf+0x12>

00000868 <__floatsisf>:
 868:	97 fb       	bst	r25, 7
 86a:	3e f4       	brtc	.+14     	; 0x87a <__floatsisf+0x12>
 86c:	90 95       	com	r25
 86e:	80 95       	com	r24
 870:	70 95       	com	r23
 872:	61 95       	neg	r22
 874:	7f 4f       	sbci	r23, 0xFF	; 255
 876:	8f 4f       	sbci	r24, 0xFF	; 255
 878:	9f 4f       	sbci	r25, 0xFF	; 255
 87a:	99 23       	and	r25, r25
 87c:	a9 f0       	breq	.+42     	; 0x8a8 <__floatsisf+0x40>
 87e:	f9 2f       	mov	r31, r25
 880:	96 e9       	ldi	r25, 0x96	; 150
 882:	bb 27       	eor	r27, r27
 884:	93 95       	inc	r25
 886:	f6 95       	lsr	r31
 888:	87 95       	ror	r24
 88a:	77 95       	ror	r23
 88c:	67 95       	ror	r22
 88e:	b7 95       	ror	r27
 890:	f1 11       	cpse	r31, r1
 892:	f8 cf       	rjmp	.-16     	; 0x884 <__floatsisf+0x1c>
 894:	fa f4       	brpl	.+62     	; 0x8d4 <__floatsisf+0x6c>
 896:	bb 0f       	add	r27, r27
 898:	11 f4       	brne	.+4      	; 0x89e <__floatsisf+0x36>
 89a:	60 ff       	sbrs	r22, 0
 89c:	1b c0       	rjmp	.+54     	; 0x8d4 <__floatsisf+0x6c>
 89e:	6f 5f       	subi	r22, 0xFF	; 255
 8a0:	7f 4f       	sbci	r23, 0xFF	; 255
 8a2:	8f 4f       	sbci	r24, 0xFF	; 255
 8a4:	9f 4f       	sbci	r25, 0xFF	; 255
 8a6:	16 c0       	rjmp	.+44     	; 0x8d4 <__floatsisf+0x6c>
 8a8:	88 23       	and	r24, r24
 8aa:	11 f0       	breq	.+4      	; 0x8b0 <__floatsisf+0x48>
 8ac:	96 e9       	ldi	r25, 0x96	; 150
 8ae:	11 c0       	rjmp	.+34     	; 0x8d2 <__floatsisf+0x6a>
 8b0:	77 23       	and	r23, r23
 8b2:	21 f0       	breq	.+8      	; 0x8bc <__floatsisf+0x54>
 8b4:	9e e8       	ldi	r25, 0x8E	; 142
 8b6:	87 2f       	mov	r24, r23
 8b8:	76 2f       	mov	r23, r22
 8ba:	05 c0       	rjmp	.+10     	; 0x8c6 <__floatsisf+0x5e>
 8bc:	66 23       	and	r22, r22
 8be:	71 f0       	breq	.+28     	; 0x8dc <__floatsisf+0x74>
 8c0:	96 e8       	ldi	r25, 0x86	; 134
 8c2:	86 2f       	mov	r24, r22
 8c4:	70 e0       	ldi	r23, 0x00	; 0
 8c6:	60 e0       	ldi	r22, 0x00	; 0
 8c8:	2a f0       	brmi	.+10     	; 0x8d4 <__floatsisf+0x6c>
 8ca:	9a 95       	dec	r25
 8cc:	66 0f       	add	r22, r22
 8ce:	77 1f       	adc	r23, r23
 8d0:	88 1f       	adc	r24, r24
 8d2:	da f7       	brpl	.-10     	; 0x8ca <__floatsisf+0x62>
 8d4:	88 0f       	add	r24, r24
 8d6:	96 95       	lsr	r25
 8d8:	87 95       	ror	r24
 8da:	97 f9       	bld	r25, 7
 8dc:	08 95       	ret

000008de <__fp_inf>:
 8de:	97 f9       	bld	r25, 7
 8e0:	9f 67       	ori	r25, 0x7F	; 127
 8e2:	80 e8       	ldi	r24, 0x80	; 128
 8e4:	70 e0       	ldi	r23, 0x00	; 0
 8e6:	60 e0       	ldi	r22, 0x00	; 0
 8e8:	08 95       	ret

000008ea <__fp_nan>:
 8ea:	9f ef       	ldi	r25, 0xFF	; 255
 8ec:	80 ec       	ldi	r24, 0xC0	; 192
 8ee:	08 95       	ret

000008f0 <__fp_pscA>:
 8f0:	00 24       	eor	r0, r0
 8f2:	0a 94       	dec	r0
 8f4:	16 16       	cp	r1, r22
 8f6:	17 06       	cpc	r1, r23
 8f8:	18 06       	cpc	r1, r24
 8fa:	09 06       	cpc	r0, r25
 8fc:	08 95       	ret

000008fe <__fp_pscB>:
 8fe:	00 24       	eor	r0, r0
 900:	0a 94       	dec	r0
 902:	12 16       	cp	r1, r18
 904:	13 06       	cpc	r1, r19
 906:	14 06       	cpc	r1, r20
 908:	05 06       	cpc	r0, r21
 90a:	08 95       	ret

0000090c <__fp_round>:
 90c:	09 2e       	mov	r0, r25
 90e:	03 94       	inc	r0
 910:	00 0c       	add	r0, r0
 912:	11 f4       	brne	.+4      	; 0x918 <__fp_round+0xc>
 914:	88 23       	and	r24, r24
 916:	52 f0       	brmi	.+20     	; 0x92c <__fp_round+0x20>
 918:	bb 0f       	add	r27, r27
 91a:	40 f4       	brcc	.+16     	; 0x92c <__fp_round+0x20>
 91c:	bf 2b       	or	r27, r31
 91e:	11 f4       	brne	.+4      	; 0x924 <__fp_round+0x18>
 920:	60 ff       	sbrs	r22, 0
 922:	04 c0       	rjmp	.+8      	; 0x92c <__fp_round+0x20>
 924:	6f 5f       	subi	r22, 0xFF	; 255
 926:	7f 4f       	sbci	r23, 0xFF	; 255
 928:	8f 4f       	sbci	r24, 0xFF	; 255
 92a:	9f 4f       	sbci	r25, 0xFF	; 255
 92c:	08 95       	ret

0000092e <__fp_split3>:
 92e:	57 fd       	sbrc	r21, 7
 930:	90 58       	subi	r25, 0x80	; 128
 932:	44 0f       	add	r20, r20
 934:	55 1f       	adc	r21, r21
 936:	59 f0       	breq	.+22     	; 0x94e <__fp_splitA+0x10>
 938:	5f 3f       	cpi	r21, 0xFF	; 255
 93a:	71 f0       	breq	.+28     	; 0x958 <__fp_splitA+0x1a>
 93c:	47 95       	ror	r20

0000093e <__fp_splitA>:
 93e:	88 0f       	add	r24, r24
 940:	97 fb       	bst	r25, 7
 942:	99 1f       	adc	r25, r25
 944:	61 f0       	breq	.+24     	; 0x95e <__fp_splitA+0x20>
 946:	9f 3f       	cpi	r25, 0xFF	; 255
 948:	79 f0       	breq	.+30     	; 0x968 <__fp_splitA+0x2a>
 94a:	87 95       	ror	r24
 94c:	08 95       	ret
 94e:	12 16       	cp	r1, r18
 950:	13 06       	cpc	r1, r19
 952:	14 06       	cpc	r1, r20
 954:	55 1f       	adc	r21, r21
 956:	f2 cf       	rjmp	.-28     	; 0x93c <__fp_split3+0xe>
 958:	46 95       	lsr	r20
 95a:	f1 df       	rcall	.-30     	; 0x93e <__fp_splitA>
 95c:	08 c0       	rjmp	.+16     	; 0x96e <__fp_splitA+0x30>
 95e:	16 16       	cp	r1, r22
 960:	17 06       	cpc	r1, r23
 962:	18 06       	cpc	r1, r24
 964:	99 1f       	adc	r25, r25
 966:	f1 cf       	rjmp	.-30     	; 0x94a <__fp_splitA+0xc>
 968:	86 95       	lsr	r24
 96a:	71 05       	cpc	r23, r1
 96c:	61 05       	cpc	r22, r1
 96e:	08 94       	sec
 970:	08 95       	ret

00000972 <__fp_zero>:
 972:	e8 94       	clt

00000974 <__fp_szero>:
 974:	bb 27       	eor	r27, r27
 976:	66 27       	eor	r22, r22
 978:	77 27       	eor	r23, r23
 97a:	cb 01       	movw	r24, r22
 97c:	97 f9       	bld	r25, 7
 97e:	08 95       	ret

00000980 <__mulsf3>:
 980:	0b d0       	rcall	.+22     	; 0x998 <__mulsf3x>
 982:	c4 cf       	rjmp	.-120    	; 0x90c <__fp_round>
 984:	b5 df       	rcall	.-150    	; 0x8f0 <__fp_pscA>
 986:	28 f0       	brcs	.+10     	; 0x992 <__mulsf3+0x12>
 988:	ba df       	rcall	.-140    	; 0x8fe <__fp_pscB>
 98a:	18 f0       	brcs	.+6      	; 0x992 <__mulsf3+0x12>
 98c:	95 23       	and	r25, r21
 98e:	09 f0       	breq	.+2      	; 0x992 <__mulsf3+0x12>
 990:	a6 cf       	rjmp	.-180    	; 0x8de <__fp_inf>
 992:	ab cf       	rjmp	.-170    	; 0x8ea <__fp_nan>
 994:	11 24       	eor	r1, r1
 996:	ee cf       	rjmp	.-36     	; 0x974 <__fp_szero>

00000998 <__mulsf3x>:
 998:	ca df       	rcall	.-108    	; 0x92e <__fp_split3>
 99a:	a0 f3       	brcs	.-24     	; 0x984 <__mulsf3+0x4>

0000099c <__mulsf3_pse>:
 99c:	95 9f       	mul	r25, r21
 99e:	d1 f3       	breq	.-12     	; 0x994 <__mulsf3+0x14>
 9a0:	95 0f       	add	r25, r21
 9a2:	50 e0       	ldi	r21, 0x00	; 0
 9a4:	55 1f       	adc	r21, r21
 9a6:	62 9f       	mul	r22, r18
 9a8:	f0 01       	movw	r30, r0
 9aa:	72 9f       	mul	r23, r18
 9ac:	bb 27       	eor	r27, r27
 9ae:	f0 0d       	add	r31, r0
 9b0:	b1 1d       	adc	r27, r1
 9b2:	63 9f       	mul	r22, r19
 9b4:	aa 27       	eor	r26, r26
 9b6:	f0 0d       	add	r31, r0
 9b8:	b1 1d       	adc	r27, r1
 9ba:	aa 1f       	adc	r26, r26
 9bc:	64 9f       	mul	r22, r20
 9be:	66 27       	eor	r22, r22
 9c0:	b0 0d       	add	r27, r0
 9c2:	a1 1d       	adc	r26, r1
 9c4:	66 1f       	adc	r22, r22
 9c6:	82 9f       	mul	r24, r18
 9c8:	22 27       	eor	r18, r18
 9ca:	b0 0d       	add	r27, r0
 9cc:	a1 1d       	adc	r26, r1
 9ce:	62 1f       	adc	r22, r18
 9d0:	73 9f       	mul	r23, r19
 9d2:	b0 0d       	add	r27, r0
 9d4:	a1 1d       	adc	r26, r1
 9d6:	62 1f       	adc	r22, r18
 9d8:	83 9f       	mul	r24, r19
 9da:	a0 0d       	add	r26, r0
 9dc:	61 1d       	adc	r22, r1
 9de:	22 1f       	adc	r18, r18
 9e0:	74 9f       	mul	r23, r20
 9e2:	33 27       	eor	r19, r19
 9e4:	a0 0d       	add	r26, r0
 9e6:	61 1d       	adc	r22, r1
 9e8:	23 1f       	adc	r18, r19
 9ea:	84 9f       	mul	r24, r20
 9ec:	60 0d       	add	r22, r0
 9ee:	21 1d       	adc	r18, r1
 9f0:	82 2f       	mov	r24, r18
 9f2:	76 2f       	mov	r23, r22
 9f4:	6a 2f       	mov	r22, r26
 9f6:	11 24       	eor	r1, r1
 9f8:	9f 57       	subi	r25, 0x7F	; 127
 9fa:	50 40       	sbci	r21, 0x00	; 0
 9fc:	8a f0       	brmi	.+34     	; 0xa20 <__mulsf3_pse+0x84>
 9fe:	e1 f0       	breq	.+56     	; 0xa38 <__mulsf3_pse+0x9c>
 a00:	88 23       	and	r24, r24
 a02:	4a f0       	brmi	.+18     	; 0xa16 <__mulsf3_pse+0x7a>
 a04:	ee 0f       	add	r30, r30
 a06:	ff 1f       	adc	r31, r31
 a08:	bb 1f       	adc	r27, r27
 a0a:	66 1f       	adc	r22, r22
 a0c:	77 1f       	adc	r23, r23
 a0e:	88 1f       	adc	r24, r24
 a10:	91 50       	subi	r25, 0x01	; 1
 a12:	50 40       	sbci	r21, 0x00	; 0
 a14:	a9 f7       	brne	.-22     	; 0xa00 <__mulsf3_pse+0x64>
 a16:	9e 3f       	cpi	r25, 0xFE	; 254
 a18:	51 05       	cpc	r21, r1
 a1a:	70 f0       	brcs	.+28     	; 0xa38 <__mulsf3_pse+0x9c>
 a1c:	60 cf       	rjmp	.-320    	; 0x8de <__fp_inf>
 a1e:	aa cf       	rjmp	.-172    	; 0x974 <__fp_szero>
 a20:	5f 3f       	cpi	r21, 0xFF	; 255
 a22:	ec f3       	brlt	.-6      	; 0xa1e <__mulsf3_pse+0x82>
 a24:	98 3e       	cpi	r25, 0xE8	; 232
 a26:	dc f3       	brlt	.-10     	; 0xa1e <__mulsf3_pse+0x82>
 a28:	86 95       	lsr	r24
 a2a:	77 95       	ror	r23
 a2c:	67 95       	ror	r22
 a2e:	b7 95       	ror	r27
 a30:	f7 95       	ror	r31
 a32:	e7 95       	ror	r30
 a34:	9f 5f       	subi	r25, 0xFF	; 255
 a36:	c1 f7       	brne	.-16     	; 0xa28 <__mulsf3_pse+0x8c>
 a38:	fe 2b       	or	r31, r30
 a3a:	88 0f       	add	r24, r24
 a3c:	91 1d       	adc	r25, r1
 a3e:	96 95       	lsr	r25
 a40:	87 95       	ror	r24
 a42:	97 f9       	bld	r25, 7
 a44:	08 95       	ret

00000a46 <malloc>:
 a46:	0f 93       	push	r16
 a48:	1f 93       	push	r17
 a4a:	cf 93       	push	r28
 a4c:	df 93       	push	r29
 a4e:	82 30       	cpi	r24, 0x02	; 2
 a50:	91 05       	cpc	r25, r1
 a52:	10 f4       	brcc	.+4      	; 0xa58 <malloc+0x12>
 a54:	82 e0       	ldi	r24, 0x02	; 2
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <__flp>
 a5c:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <__flp+0x1>
 a60:	20 e0       	ldi	r18, 0x00	; 0
 a62:	30 e0       	ldi	r19, 0x00	; 0
 a64:	a0 e0       	ldi	r26, 0x00	; 0
 a66:	b0 e0       	ldi	r27, 0x00	; 0
 a68:	30 97       	sbiw	r30, 0x00	; 0
 a6a:	19 f1       	breq	.+70     	; 0xab2 <malloc+0x6c>
 a6c:	40 81       	ld	r20, Z
 a6e:	51 81       	ldd	r21, Z+1	; 0x01
 a70:	02 81       	ldd	r16, Z+2	; 0x02
 a72:	13 81       	ldd	r17, Z+3	; 0x03
 a74:	48 17       	cp	r20, r24
 a76:	59 07       	cpc	r21, r25
 a78:	c8 f0       	brcs	.+50     	; 0xaac <malloc+0x66>
 a7a:	84 17       	cp	r24, r20
 a7c:	95 07       	cpc	r25, r21
 a7e:	69 f4       	brne	.+26     	; 0xa9a <malloc+0x54>
 a80:	10 97       	sbiw	r26, 0x00	; 0
 a82:	31 f0       	breq	.+12     	; 0xa90 <malloc+0x4a>
 a84:	12 96       	adiw	r26, 0x02	; 2
 a86:	0c 93       	st	X, r16
 a88:	12 97       	sbiw	r26, 0x02	; 2
 a8a:	13 96       	adiw	r26, 0x03	; 3
 a8c:	1c 93       	st	X, r17
 a8e:	27 c0       	rjmp	.+78     	; 0xade <malloc+0x98>
 a90:	00 93 20 02 	sts	0x0220, r16	; 0x800220 <__flp>
 a94:	10 93 21 02 	sts	0x0221, r17	; 0x800221 <__flp+0x1>
 a98:	22 c0       	rjmp	.+68     	; 0xade <malloc+0x98>
 a9a:	21 15       	cp	r18, r1
 a9c:	31 05       	cpc	r19, r1
 a9e:	19 f0       	breq	.+6      	; 0xaa6 <malloc+0x60>
 aa0:	42 17       	cp	r20, r18
 aa2:	53 07       	cpc	r21, r19
 aa4:	18 f4       	brcc	.+6      	; 0xaac <malloc+0x66>
 aa6:	9a 01       	movw	r18, r20
 aa8:	bd 01       	movw	r22, r26
 aaa:	ef 01       	movw	r28, r30
 aac:	df 01       	movw	r26, r30
 aae:	f8 01       	movw	r30, r16
 ab0:	db cf       	rjmp	.-74     	; 0xa68 <malloc+0x22>
 ab2:	21 15       	cp	r18, r1
 ab4:	31 05       	cpc	r19, r1
 ab6:	f9 f0       	breq	.+62     	; 0xaf6 <malloc+0xb0>
 ab8:	28 1b       	sub	r18, r24
 aba:	39 0b       	sbc	r19, r25
 abc:	24 30       	cpi	r18, 0x04	; 4
 abe:	31 05       	cpc	r19, r1
 ac0:	80 f4       	brcc	.+32     	; 0xae2 <malloc+0x9c>
 ac2:	8a 81       	ldd	r24, Y+2	; 0x02
 ac4:	9b 81       	ldd	r25, Y+3	; 0x03
 ac6:	61 15       	cp	r22, r1
 ac8:	71 05       	cpc	r23, r1
 aca:	21 f0       	breq	.+8      	; 0xad4 <malloc+0x8e>
 acc:	fb 01       	movw	r30, r22
 ace:	93 83       	std	Z+3, r25	; 0x03
 ad0:	82 83       	std	Z+2, r24	; 0x02
 ad2:	04 c0       	rjmp	.+8      	; 0xadc <malloc+0x96>
 ad4:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <__flp+0x1>
 ad8:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__flp>
 adc:	fe 01       	movw	r30, r28
 ade:	32 96       	adiw	r30, 0x02	; 2
 ae0:	44 c0       	rjmp	.+136    	; 0xb6a <malloc+0x124>
 ae2:	fe 01       	movw	r30, r28
 ae4:	e2 0f       	add	r30, r18
 ae6:	f3 1f       	adc	r31, r19
 ae8:	81 93       	st	Z+, r24
 aea:	91 93       	st	Z+, r25
 aec:	22 50       	subi	r18, 0x02	; 2
 aee:	31 09       	sbc	r19, r1
 af0:	39 83       	std	Y+1, r19	; 0x01
 af2:	28 83       	st	Y, r18
 af4:	3a c0       	rjmp	.+116    	; 0xb6a <malloc+0x124>
 af6:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <__brkval>
 afa:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <__brkval+0x1>
 afe:	23 2b       	or	r18, r19
 b00:	41 f4       	brne	.+16     	; 0xb12 <malloc+0xcc>
 b02:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 b06:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 b0a:	30 93 1f 02 	sts	0x021F, r19	; 0x80021f <__brkval+0x1>
 b0e:	20 93 1e 02 	sts	0x021E, r18	; 0x80021e <__brkval>
 b12:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 b16:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 b1a:	21 15       	cp	r18, r1
 b1c:	31 05       	cpc	r19, r1
 b1e:	41 f4       	brne	.+16     	; 0xb30 <malloc+0xea>
 b20:	2d b7       	in	r18, 0x3d	; 61
 b22:	3e b7       	in	r19, 0x3e	; 62
 b24:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 b28:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 b2c:	24 1b       	sub	r18, r20
 b2e:	35 0b       	sbc	r19, r21
 b30:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <__brkval>
 b34:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <__brkval+0x1>
 b38:	e2 17       	cp	r30, r18
 b3a:	f3 07       	cpc	r31, r19
 b3c:	a0 f4       	brcc	.+40     	; 0xb66 <malloc+0x120>
 b3e:	2e 1b       	sub	r18, r30
 b40:	3f 0b       	sbc	r19, r31
 b42:	28 17       	cp	r18, r24
 b44:	39 07       	cpc	r19, r25
 b46:	78 f0       	brcs	.+30     	; 0xb66 <malloc+0x120>
 b48:	ac 01       	movw	r20, r24
 b4a:	4e 5f       	subi	r20, 0xFE	; 254
 b4c:	5f 4f       	sbci	r21, 0xFF	; 255
 b4e:	24 17       	cp	r18, r20
 b50:	35 07       	cpc	r19, r21
 b52:	48 f0       	brcs	.+18     	; 0xb66 <malloc+0x120>
 b54:	4e 0f       	add	r20, r30
 b56:	5f 1f       	adc	r21, r31
 b58:	50 93 1f 02 	sts	0x021F, r21	; 0x80021f <__brkval+0x1>
 b5c:	40 93 1e 02 	sts	0x021E, r20	; 0x80021e <__brkval>
 b60:	81 93       	st	Z+, r24
 b62:	91 93       	st	Z+, r25
 b64:	02 c0       	rjmp	.+4      	; 0xb6a <malloc+0x124>
 b66:	e0 e0       	ldi	r30, 0x00	; 0
 b68:	f0 e0       	ldi	r31, 0x00	; 0
 b6a:	cf 01       	movw	r24, r30
 b6c:	df 91       	pop	r29
 b6e:	cf 91       	pop	r28
 b70:	1f 91       	pop	r17
 b72:	0f 91       	pop	r16
 b74:	08 95       	ret

00000b76 <free>:
 b76:	cf 93       	push	r28
 b78:	df 93       	push	r29
 b7a:	00 97       	sbiw	r24, 0x00	; 0
 b7c:	09 f4       	brne	.+2      	; 0xb80 <free+0xa>
 b7e:	81 c0       	rjmp	.+258    	; 0xc82 <free+0x10c>
 b80:	fc 01       	movw	r30, r24
 b82:	32 97       	sbiw	r30, 0x02	; 2
 b84:	13 82       	std	Z+3, r1	; 0x03
 b86:	12 82       	std	Z+2, r1	; 0x02
 b88:	a0 91 20 02 	lds	r26, 0x0220	; 0x800220 <__flp>
 b8c:	b0 91 21 02 	lds	r27, 0x0221	; 0x800221 <__flp+0x1>
 b90:	10 97       	sbiw	r26, 0x00	; 0
 b92:	81 f4       	brne	.+32     	; 0xbb4 <free+0x3e>
 b94:	20 81       	ld	r18, Z
 b96:	31 81       	ldd	r19, Z+1	; 0x01
 b98:	82 0f       	add	r24, r18
 b9a:	93 1f       	adc	r25, r19
 b9c:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <__brkval>
 ba0:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <__brkval+0x1>
 ba4:	28 17       	cp	r18, r24
 ba6:	39 07       	cpc	r19, r25
 ba8:	51 f5       	brne	.+84     	; 0xbfe <free+0x88>
 baa:	f0 93 1f 02 	sts	0x021F, r31	; 0x80021f <__brkval+0x1>
 bae:	e0 93 1e 02 	sts	0x021E, r30	; 0x80021e <__brkval>
 bb2:	67 c0       	rjmp	.+206    	; 0xc82 <free+0x10c>
 bb4:	ed 01       	movw	r28, r26
 bb6:	20 e0       	ldi	r18, 0x00	; 0
 bb8:	30 e0       	ldi	r19, 0x00	; 0
 bba:	ce 17       	cp	r28, r30
 bbc:	df 07       	cpc	r29, r31
 bbe:	40 f4       	brcc	.+16     	; 0xbd0 <free+0x5a>
 bc0:	4a 81       	ldd	r20, Y+2	; 0x02
 bc2:	5b 81       	ldd	r21, Y+3	; 0x03
 bc4:	9e 01       	movw	r18, r28
 bc6:	41 15       	cp	r20, r1
 bc8:	51 05       	cpc	r21, r1
 bca:	f1 f0       	breq	.+60     	; 0xc08 <free+0x92>
 bcc:	ea 01       	movw	r28, r20
 bce:	f5 cf       	rjmp	.-22     	; 0xbba <free+0x44>
 bd0:	d3 83       	std	Z+3, r29	; 0x03
 bd2:	c2 83       	std	Z+2, r28	; 0x02
 bd4:	40 81       	ld	r20, Z
 bd6:	51 81       	ldd	r21, Z+1	; 0x01
 bd8:	84 0f       	add	r24, r20
 bda:	95 1f       	adc	r25, r21
 bdc:	c8 17       	cp	r28, r24
 bde:	d9 07       	cpc	r29, r25
 be0:	59 f4       	brne	.+22     	; 0xbf8 <free+0x82>
 be2:	88 81       	ld	r24, Y
 be4:	99 81       	ldd	r25, Y+1	; 0x01
 be6:	84 0f       	add	r24, r20
 be8:	95 1f       	adc	r25, r21
 bea:	02 96       	adiw	r24, 0x02	; 2
 bec:	91 83       	std	Z+1, r25	; 0x01
 bee:	80 83       	st	Z, r24
 bf0:	8a 81       	ldd	r24, Y+2	; 0x02
 bf2:	9b 81       	ldd	r25, Y+3	; 0x03
 bf4:	93 83       	std	Z+3, r25	; 0x03
 bf6:	82 83       	std	Z+2, r24	; 0x02
 bf8:	21 15       	cp	r18, r1
 bfa:	31 05       	cpc	r19, r1
 bfc:	29 f4       	brne	.+10     	; 0xc08 <free+0x92>
 bfe:	f0 93 21 02 	sts	0x0221, r31	; 0x800221 <__flp+0x1>
 c02:	e0 93 20 02 	sts	0x0220, r30	; 0x800220 <__flp>
 c06:	3d c0       	rjmp	.+122    	; 0xc82 <free+0x10c>
 c08:	e9 01       	movw	r28, r18
 c0a:	fb 83       	std	Y+3, r31	; 0x03
 c0c:	ea 83       	std	Y+2, r30	; 0x02
 c0e:	49 91       	ld	r20, Y+
 c10:	59 91       	ld	r21, Y+
 c12:	c4 0f       	add	r28, r20
 c14:	d5 1f       	adc	r29, r21
 c16:	ec 17       	cp	r30, r28
 c18:	fd 07       	cpc	r31, r29
 c1a:	61 f4       	brne	.+24     	; 0xc34 <free+0xbe>
 c1c:	80 81       	ld	r24, Z
 c1e:	91 81       	ldd	r25, Z+1	; 0x01
 c20:	84 0f       	add	r24, r20
 c22:	95 1f       	adc	r25, r21
 c24:	02 96       	adiw	r24, 0x02	; 2
 c26:	e9 01       	movw	r28, r18
 c28:	99 83       	std	Y+1, r25	; 0x01
 c2a:	88 83       	st	Y, r24
 c2c:	82 81       	ldd	r24, Z+2	; 0x02
 c2e:	93 81       	ldd	r25, Z+3	; 0x03
 c30:	9b 83       	std	Y+3, r25	; 0x03
 c32:	8a 83       	std	Y+2, r24	; 0x02
 c34:	e0 e0       	ldi	r30, 0x00	; 0
 c36:	f0 e0       	ldi	r31, 0x00	; 0
 c38:	12 96       	adiw	r26, 0x02	; 2
 c3a:	8d 91       	ld	r24, X+
 c3c:	9c 91       	ld	r25, X
 c3e:	13 97       	sbiw	r26, 0x03	; 3
 c40:	00 97       	sbiw	r24, 0x00	; 0
 c42:	19 f0       	breq	.+6      	; 0xc4a <free+0xd4>
 c44:	fd 01       	movw	r30, r26
 c46:	dc 01       	movw	r26, r24
 c48:	f7 cf       	rjmp	.-18     	; 0xc38 <free+0xc2>
 c4a:	8d 91       	ld	r24, X+
 c4c:	9c 91       	ld	r25, X
 c4e:	11 97       	sbiw	r26, 0x01	; 1
 c50:	9d 01       	movw	r18, r26
 c52:	2e 5f       	subi	r18, 0xFE	; 254
 c54:	3f 4f       	sbci	r19, 0xFF	; 255
 c56:	82 0f       	add	r24, r18
 c58:	93 1f       	adc	r25, r19
 c5a:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <__brkval>
 c5e:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <__brkval+0x1>
 c62:	28 17       	cp	r18, r24
 c64:	39 07       	cpc	r19, r25
 c66:	69 f4       	brne	.+26     	; 0xc82 <free+0x10c>
 c68:	30 97       	sbiw	r30, 0x00	; 0
 c6a:	29 f4       	brne	.+10     	; 0xc76 <free+0x100>
 c6c:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <__flp+0x1>
 c70:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <__flp>
 c74:	02 c0       	rjmp	.+4      	; 0xc7a <free+0x104>
 c76:	13 82       	std	Z+3, r1	; 0x03
 c78:	12 82       	std	Z+2, r1	; 0x02
 c7a:	b0 93 1f 02 	sts	0x021F, r27	; 0x80021f <__brkval+0x1>
 c7e:	a0 93 1e 02 	sts	0x021E, r26	; 0x80021e <__brkval>
 c82:	df 91       	pop	r29
 c84:	cf 91       	pop	r28
 c86:	08 95       	ret

00000c88 <_exit>:
 c88:	f8 94       	cli

00000c8a <__stop_program>:
 c8a:	ff cf       	rjmp	.-2      	; 0xc8a <__stop_program>
