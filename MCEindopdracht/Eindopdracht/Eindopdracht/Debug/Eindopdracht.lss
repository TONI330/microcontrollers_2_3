
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  0000059a  0000062e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000059a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800206  00800206  00000634  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000664  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011ad  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eed  00000000  00000000  00001909  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000719  00000000  00000000  000027f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00002f10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000731  00000000  00000000  000030c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000445  00000000  00000000  000037f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003c36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6f c0       	rjmp	.+222    	; 0x124 <__vector_17>
  46:	00 00       	nop
  48:	7c c0       	rjmp	.+248    	; 0x142 <__vector_18>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	ed c0       	rjmp	.+474    	; 0x230 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a6 e0       	ldi	r26, 0x06	; 6
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a2 32       	cpi	r26, 0x22	; 34
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>

00000104 <__do_copy_data>:
 104:	12 e0       	ldi	r17, 0x02	; 2
 106:	a0 e0       	ldi	r26, 0x00	; 0
 108:	b2 e0       	ldi	r27, 0x02	; 2
 10a:	ea e9       	ldi	r30, 0x9A	; 154
 10c:	f5 e0       	ldi	r31, 0x05	; 5
 10e:	00 e0       	ldi	r16, 0x00	; 0
 110:	0b bf       	out	0x3b, r16	; 59
 112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x14>
 114:	07 90       	elpm	r0, Z+
 116:	0d 92       	st	X+, r0
 118:	a6 30       	cpi	r26, 0x06	; 6
 11a:	b1 07       	cpc	r27, r17
 11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0x10>
 11e:	53 d0       	rcall	.+166    	; 0x1c6 <main>
 120:	3a c2       	rjmp	.+1140   	; 0x596 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_17>:
		set_speed(percentage_speed);
		turn(0);
		return;
	}
	
	set_speed(percentage_speed);
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
 130:	85 b1       	in	r24, 0x05	; 5
 132:	80 58       	subi	r24, 0x80	; 128
 134:	85 b9       	out	0x05, r24	; 5
 136:	8f 91       	pop	r24
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <__vector_18>:
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	95 b1       	in	r25, 0x05	; 5
 152:	80 e4       	ldi	r24, 0x40	; 64
 154:	89 27       	eor	r24, r25
 156:	85 b9       	out	0x05, r24	; 5
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <calculate_timer_compare_time>:
 166:	20 e2       	ldi	r18, 0x20	; 32
 168:	3e e4       	ldi	r19, 0x4E	; 78
 16a:	a9 01       	movw	r20, r18
 16c:	48 1b       	sub	r20, r24
 16e:	59 0b       	sbc	r21, r25
 170:	ca 01       	movw	r24, r20
 172:	08 95       	ret

00000174 <init_servos>:
}

void init_servos()
{
	// Set up timer in PWM, Phase and frequency Correct mode.
	TCCR1A = 0b01010110;
 174:	86 e5       	ldi	r24, 0x56	; 86
 176:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>

	// Set up timer with pre-scaler = 8 and PWM, Phase and frequency correct mode.
	TCCR1B |= (1 << WGM13) | (1 << CS11);
 17a:	e1 e8       	ldi	r30, 0x81	; 129
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	82 61       	ori	r24, 0x12	; 18
 182:	80 83       	st	Z, r24

	// Initialize counter.
	TCNT1 = 0;
 184:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 188:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	ICR1 = 20000;
 18c:	80 e2       	ldi	r24, 0x20	; 32
 18e:	9e e4       	ldi	r25, 0x4E	; 78
 190:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7c0087>
 194:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7c0086>

	// Initialize compare values.
	OCR1A = calculate_timer_compare_time(DRIVE_FULL_STOP_MS);
 198:	8c ed       	ldi	r24, 0xDC	; 220
 19a:	95 e0       	ldi	r25, 0x05	; 5
 19c:	e4 df       	rcall	.-56     	; 0x166 <calculate_timer_compare_time>
 19e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 1a2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	OCR1B = calculate_timer_compare_time(DRIVE_FULL_STOP_MS);
 1a6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 1aa:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>

	// Enable compare interrupts.
	TIMSK1 |= (1 << OCIE1A);
 1ae:	ef e6       	ldi	r30, 0x6F	; 111
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	82 60       	ori	r24, 0x02	; 2
 1b6:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1B);
 1b8:	80 81       	ld	r24, Z
 1ba:	84 60       	ori	r24, 0x04	; 4
 1bc:	80 83       	st	Z, r24
	
	DDRB |= (1 << 7) | (1 << 6);
 1be:	84 b1       	in	r24, 0x04	; 4
 1c0:	80 6c       	ori	r24, 0xC0	; 192
 1c2:	84 b9       	out	0x04, r24	; 4
 1c4:	08 95       	ret

000001c6 <main>:
	}
}

int main(void)
{
	sei(); // Enable interrupts.
 1c6:	78 94       	sei
	DDRB = 0;
 1c8:	14 b8       	out	0x04, r1	; 4
	
	init_servos();
 1ca:	d4 df       	rcall	.-88     	; 0x174 <init_servos>
	init_pwm();
 1cc:	08 d0       	rcall	.+16     	; 0x1de <init_pwm>
 1ce:	80 e1       	ldi	r24, 0x10	; 16
	
	int* test_value = malloc(16);
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	c0 d0       	rcall	.+384    	; 0x354 <malloc>
 1d4:	bc 01       	movw	r22, r24
	pwm_reader_add_pin(3, test_value);
 1d6:	83 e0       	ldi	r24, 0x03	; 3
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0d d0       	rcall	.+26     	; 0x1f6 <pwm_reader_add_pin>
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <main+0x16>

000001de <init_pwm>:
{
	 // Set up timer in PWM, Phase and frequency Correct mode.
	 //TCCR2A = 0b01010110;

	 // Set up timer with pre-scaler = 8 and PWM, Phase and frequency correct mode.
	 TCCR0B |= (1 << WGM13) | (1 << CS11);
 1de:	85 b5       	in	r24, 0x25	; 37
 1e0:	82 61       	ori	r24, 0x12	; 18
 1e2:	85 bd       	out	0x25, r24	; 37

	 // Initialize counter.
	 TCNT0 = 0;
 1e4:	16 bc       	out	0x26, r1	; 38
	 //ICR1 = 20000;

	 // Initialize compare values.
	 OCR0A = TICKS_PER_MEASUREMENT;
 1e6:	85 e0       	ldi	r24, 0x05	; 5
 1e8:	87 bd       	out	0x27, r24	; 39

	 // Enable compare interrupts.
	 TIMSK0 |= (1 << OCIE0A);
 1ea:	ee e6       	ldi	r30, 0x6E	; 110
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	82 60       	ori	r24, 0x02	; 2
 1f2:	80 83       	st	Z, r24
 1f4:	08 95       	ret

000001f6 <pwm_reader_add_pin>:
}

void pwm_reader_add_pin(int pin, int* out_ticks)
{
	input_pins[pin].output_pointer = out_ticks;
 1f6:	fc 01       	movw	r30, r24
 1f8:	ee 0f       	add	r30, r30
 1fa:	ff 1f       	adc	r31, r31
 1fc:	8e 0f       	add	r24, r30
 1fe:	9f 1f       	adc	r25, r31
 200:	fc 01       	movw	r30, r24
 202:	ea 5f       	subi	r30, 0xFA	; 250
 204:	fd 4f       	sbci	r31, 0xFD	; 253
 206:	71 83       	std	Z+1, r23	; 0x01
 208:	60 83       	st	Z, r22
	input_pins[pin].state = false;
 20a:	12 82       	std	Z+2, r1	; 0x02
 20c:	08 95       	ret

0000020e <pin_is_high>:
	
	Returns true if the given pin is high, else false.
*/
bool pin_is_high(short pin_number)
{
	return PINB & (1 << pin_number);
 20e:	93 b1       	in	r25, 0x03	; 3
 210:	21 e0       	ldi	r18, 0x01	; 1
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <pin_is_high+0xc>
 216:	22 0f       	add	r18, r18
 218:	33 1f       	adc	r19, r19
 21a:	8a 95       	dec	r24
 21c:	e2 f7       	brpl	.-8      	; 0x216 <pin_is_high+0x8>
 21e:	89 2f       	mov	r24, r25
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	28 23       	and	r18, r24
 224:	39 23       	and	r19, r25
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	23 2b       	or	r18, r19
 22a:	09 f4       	brne	.+2      	; 0x22e <pin_is_high+0x20>
 22c:	80 e0       	ldi	r24, 0x00	; 0
}
 22e:	08 95       	ret

00000230 <__vector_21>:

ISR(TIMER0_COMPA_vect)
{
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	0b b6       	in	r0, 0x3b	; 59
 23c:	0f 92       	push	r0
 23e:	2f 93       	push	r18
 240:	3f 93       	push	r19
 242:	4f 93       	push	r20
 244:	5f 93       	push	r21
 246:	6f 93       	push	r22
 248:	7f 93       	push	r23
 24a:	8f 93       	push	r24
 24c:	9f 93       	push	r25
 24e:	af 93       	push	r26
 250:	bf 93       	push	r27
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	ef 93       	push	r30
 258:	ff 93       	push	r31
	for(int i = 0; i < 8; i++)
 25a:	c0 e0       	ldi	r28, 0x00	; 0
 25c:	d0 e0       	ldi	r29, 0x00	; 0
 25e:	60 c0       	rjmp	.+192    	; 0x320 <__vector_21+0xf0>
	{
		if(input_pins[i].output_pointer == 0)
 260:	fe 01       	movw	r30, r28
 262:	ee 0f       	add	r30, r30
 264:	ff 1f       	adc	r31, r31
 266:	ec 0f       	add	r30, r28
 268:	fd 1f       	adc	r31, r29
 26a:	ea 5f       	subi	r30, 0xFA	; 250
 26c:	fd 4f       	sbci	r31, 0xFD	; 253
 26e:	80 81       	ld	r24, Z
 270:	91 81       	ldd	r25, Z+1	; 0x01
 272:	89 2b       	or	r24, r25
 274:	09 f4       	brne	.+2      	; 0x278 <__vector_21+0x48>
 276:	53 c0       	rjmp	.+166    	; 0x31e <__vector_21+0xee>
		{
			continue;
		}
		
		if(pin_is_high(i))
 278:	ce 01       	movw	r24, r28
 27a:	c9 df       	rcall	.-110    	; 0x20e <pin_is_high>
 27c:	88 23       	and	r24, r24
 27e:	89 f1       	breq	.+98     	; 0x2e2 <__vector_21+0xb2>
		{
			if(!input_pins[i].state)
 280:	fe 01       	movw	r30, r28
 282:	ee 0f       	add	r30, r30
 284:	ff 1f       	adc	r31, r31
 286:	ec 0f       	add	r30, r28
 288:	fd 1f       	adc	r31, r29
 28a:	ea 5f       	subi	r30, 0xFA	; 250
 28c:	fd 4f       	sbci	r31, 0xFD	; 253
 28e:	82 81       	ldd	r24, Z+2	; 0x02
 290:	81 11       	cpse	r24, r1
 292:	0e c0       	rjmp	.+28     	; 0x2b0 <__vector_21+0x80>
			{
				input_pins[i].state = true;
 294:	fe 01       	movw	r30, r28
 296:	ee 0f       	add	r30, r30
 298:	ff 1f       	adc	r31, r31
 29a:	ec 0f       	add	r30, r28
 29c:	fd 1f       	adc	r31, r29
 29e:	ea 5f       	subi	r30, 0xFA	; 250
 2a0:	fd 4f       	sbci	r31, 0xFD	; 253
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	82 83       	std	Z+2, r24	; 0x02
				*input_pins[i].output_pointer = 0;				
 2a6:	01 90       	ld	r0, Z+
 2a8:	f0 81       	ld	r31, Z
 2aa:	e0 2d       	mov	r30, r0
 2ac:	11 82       	std	Z+1, r1	; 0x01
 2ae:	10 82       	st	Z, r1
			}

			if(input_pins[i].state)
 2b0:	fe 01       	movw	r30, r28
 2b2:	ee 0f       	add	r30, r30
 2b4:	ff 1f       	adc	r31, r31
 2b6:	ec 0f       	add	r30, r28
 2b8:	fd 1f       	adc	r31, r29
 2ba:	ea 5f       	subi	r30, 0xFA	; 250
 2bc:	fd 4f       	sbci	r31, 0xFD	; 253
 2be:	82 81       	ldd	r24, Z+2	; 0x02
 2c0:	88 23       	and	r24, r24
 2c2:	79 f0       	breq	.+30     	; 0x2e2 <__vector_21+0xb2>
			{
				*input_pins[i].output_pointer += TICKS_PER_MEASUREMENT;
 2c4:	fe 01       	movw	r30, r28
 2c6:	ee 0f       	add	r30, r30
 2c8:	ff 1f       	adc	r31, r31
 2ca:	ec 0f       	add	r30, r28
 2cc:	fd 1f       	adc	r31, r29
 2ce:	ea 5f       	subi	r30, 0xFA	; 250
 2d0:	fd 4f       	sbci	r31, 0xFD	; 253
 2d2:	01 90       	ld	r0, Z+
 2d4:	f0 81       	ld	r31, Z
 2d6:	e0 2d       	mov	r30, r0
 2d8:	80 81       	ld	r24, Z
 2da:	91 81       	ldd	r25, Z+1	; 0x01
 2dc:	05 96       	adiw	r24, 0x05	; 5
 2de:	91 83       	std	Z+1, r25	; 0x01
 2e0:	80 83       	st	Z, r24
			}			
		}

		if(!pin_is_high(i) && input_pins[i].state)
 2e2:	ce 01       	movw	r24, r28
 2e4:	94 df       	rcall	.-216    	; 0x20e <pin_is_high>
 2e6:	81 11       	cpse	r24, r1
 2e8:	1a c0       	rjmp	.+52     	; 0x31e <__vector_21+0xee>
 2ea:	fe 01       	movw	r30, r28
 2ec:	ee 0f       	add	r30, r30
 2ee:	ff 1f       	adc	r31, r31
 2f0:	ec 0f       	add	r30, r28
 2f2:	fd 1f       	adc	r31, r29
 2f4:	ea 5f       	subi	r30, 0xFA	; 250
 2f6:	fd 4f       	sbci	r31, 0xFD	; 253
 2f8:	82 81       	ldd	r24, Z+2	; 0x02
 2fa:	88 23       	and	r24, r24
 2fc:	81 f0       	breq	.+32     	; 0x31e <__vector_21+0xee>
		{
			*input_pins[i].output_pointer += TICKS_PER_MEASUREMENT;
 2fe:	fe 01       	movw	r30, r28
 300:	ee 0f       	add	r30, r30
 302:	ff 1f       	adc	r31, r31
 304:	ec 0f       	add	r30, r28
 306:	fd 1f       	adc	r31, r29
 308:	ea 5f       	subi	r30, 0xFA	; 250
 30a:	fd 4f       	sbci	r31, 0xFD	; 253
 30c:	a0 81       	ld	r26, Z
 30e:	b1 81       	ldd	r27, Z+1	; 0x01
 310:	8d 91       	ld	r24, X+
 312:	9c 91       	ld	r25, X
 314:	11 97       	sbiw	r26, 0x01	; 1
 316:	05 96       	adiw	r24, 0x05	; 5
 318:	8d 93       	st	X+, r24
 31a:	9c 93       	st	X, r25
			input_pins[i].state = false;
 31c:	12 82       	std	Z+2, r1	; 0x02
	return PINB & (1 << pin_number);
}

ISR(TIMER0_COMPA_vect)
{
	for(int i = 0; i < 8; i++)
 31e:	21 96       	adiw	r28, 0x01	; 1
 320:	c8 30       	cpi	r28, 0x08	; 8
 322:	d1 05       	cpc	r29, r1
 324:	0c f4       	brge	.+2      	; 0x328 <__vector_21+0xf8>
 326:	9c cf       	rjmp	.-200    	; 0x260 <__vector_21+0x30>
			*input_pins[i].output_pointer += TICKS_PER_MEASUREMENT;
			input_pins[i].state = false;
		}
	}

	TCNT0 = 0;
 328:	16 bc       	out	0x26, r1	; 38
}
 32a:	ff 91       	pop	r31
 32c:	ef 91       	pop	r30
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	bf 91       	pop	r27
 334:	af 91       	pop	r26
 336:	9f 91       	pop	r25
 338:	8f 91       	pop	r24
 33a:	7f 91       	pop	r23
 33c:	6f 91       	pop	r22
 33e:	5f 91       	pop	r21
 340:	4f 91       	pop	r20
 342:	3f 91       	pop	r19
 344:	2f 91       	pop	r18
 346:	0f 90       	pop	r0
 348:	0b be       	out	0x3b, r0	; 59
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <malloc>:
 354:	0f 93       	push	r16
 356:	1f 93       	push	r17
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	82 30       	cpi	r24, 0x02	; 2
 35e:	91 05       	cpc	r25, r1
 360:	10 f4       	brcc	.+4      	; 0x366 <malloc+0x12>
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <__flp>
 36a:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <__flp+0x1>
 36e:	20 e0       	ldi	r18, 0x00	; 0
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	a0 e0       	ldi	r26, 0x00	; 0
 374:	b0 e0       	ldi	r27, 0x00	; 0
 376:	30 97       	sbiw	r30, 0x00	; 0
 378:	19 f1       	breq	.+70     	; 0x3c0 <malloc+0x6c>
 37a:	40 81       	ld	r20, Z
 37c:	51 81       	ldd	r21, Z+1	; 0x01
 37e:	02 81       	ldd	r16, Z+2	; 0x02
 380:	13 81       	ldd	r17, Z+3	; 0x03
 382:	48 17       	cp	r20, r24
 384:	59 07       	cpc	r21, r25
 386:	c8 f0       	brcs	.+50     	; 0x3ba <malloc+0x66>
 388:	84 17       	cp	r24, r20
 38a:	95 07       	cpc	r25, r21
 38c:	69 f4       	brne	.+26     	; 0x3a8 <malloc+0x54>
 38e:	10 97       	sbiw	r26, 0x00	; 0
 390:	31 f0       	breq	.+12     	; 0x39e <malloc+0x4a>
 392:	12 96       	adiw	r26, 0x02	; 2
 394:	0c 93       	st	X, r16
 396:	12 97       	sbiw	r26, 0x02	; 2
 398:	13 96       	adiw	r26, 0x03	; 3
 39a:	1c 93       	st	X, r17
 39c:	27 c0       	rjmp	.+78     	; 0x3ec <malloc+0x98>
 39e:	00 93 20 02 	sts	0x0220, r16	; 0x800220 <__flp>
 3a2:	10 93 21 02 	sts	0x0221, r17	; 0x800221 <__flp+0x1>
 3a6:	22 c0       	rjmp	.+68     	; 0x3ec <malloc+0x98>
 3a8:	21 15       	cp	r18, r1
 3aa:	31 05       	cpc	r19, r1
 3ac:	19 f0       	breq	.+6      	; 0x3b4 <malloc+0x60>
 3ae:	42 17       	cp	r20, r18
 3b0:	53 07       	cpc	r21, r19
 3b2:	18 f4       	brcc	.+6      	; 0x3ba <malloc+0x66>
 3b4:	9a 01       	movw	r18, r20
 3b6:	bd 01       	movw	r22, r26
 3b8:	ef 01       	movw	r28, r30
 3ba:	df 01       	movw	r26, r30
 3bc:	f8 01       	movw	r30, r16
 3be:	db cf       	rjmp	.-74     	; 0x376 <malloc+0x22>
 3c0:	21 15       	cp	r18, r1
 3c2:	31 05       	cpc	r19, r1
 3c4:	f9 f0       	breq	.+62     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3c6:	28 1b       	sub	r18, r24
 3c8:	39 0b       	sbc	r19, r25
 3ca:	24 30       	cpi	r18, 0x04	; 4
 3cc:	31 05       	cpc	r19, r1
 3ce:	80 f4       	brcc	.+32     	; 0x3f0 <malloc+0x9c>
 3d0:	8a 81       	ldd	r24, Y+2	; 0x02
 3d2:	9b 81       	ldd	r25, Y+3	; 0x03
 3d4:	61 15       	cp	r22, r1
 3d6:	71 05       	cpc	r23, r1
 3d8:	21 f0       	breq	.+8      	; 0x3e2 <malloc+0x8e>
 3da:	fb 01       	movw	r30, r22
 3dc:	93 83       	std	Z+3, r25	; 0x03
 3de:	82 83       	std	Z+2, r24	; 0x02
 3e0:	04 c0       	rjmp	.+8      	; 0x3ea <malloc+0x96>
 3e2:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <__flp+0x1>
 3e6:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__flp>
 3ea:	fe 01       	movw	r30, r28
 3ec:	32 96       	adiw	r30, 0x02	; 2
 3ee:	44 c0       	rjmp	.+136    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 3f0:	fe 01       	movw	r30, r28
 3f2:	e2 0f       	add	r30, r18
 3f4:	f3 1f       	adc	r31, r19
 3f6:	81 93       	st	Z+, r24
 3f8:	91 93       	st	Z+, r25
 3fa:	22 50       	subi	r18, 0x02	; 2
 3fc:	31 09       	sbc	r19, r1
 3fe:	39 83       	std	Y+1, r19	; 0x01
 400:	28 83       	st	Y, r18
 402:	3a c0       	rjmp	.+116    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 404:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <__brkval>
 408:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <__brkval+0x1>
 40c:	23 2b       	or	r18, r19
 40e:	41 f4       	brne	.+16     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 410:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 414:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 418:	30 93 1f 02 	sts	0x021F, r19	; 0x80021f <__brkval+0x1>
 41c:	20 93 1e 02 	sts	0x021E, r18	; 0x80021e <__brkval>
 420:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 424:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 428:	21 15       	cp	r18, r1
 42a:	31 05       	cpc	r19, r1
 42c:	41 f4       	brne	.+16     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 42e:	2d b7       	in	r18, 0x3d	; 61
 430:	3e b7       	in	r19, 0x3e	; 62
 432:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 436:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 43a:	24 1b       	sub	r18, r20
 43c:	35 0b       	sbc	r19, r21
 43e:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <__brkval>
 442:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <__brkval+0x1>
 446:	e2 17       	cp	r30, r18
 448:	f3 07       	cpc	r31, r19
 44a:	a0 f4       	brcc	.+40     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 44c:	2e 1b       	sub	r18, r30
 44e:	3f 0b       	sbc	r19, r31
 450:	28 17       	cp	r18, r24
 452:	39 07       	cpc	r19, r25
 454:	78 f0       	brcs	.+30     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 456:	ac 01       	movw	r20, r24
 458:	4e 5f       	subi	r20, 0xFE	; 254
 45a:	5f 4f       	sbci	r21, 0xFF	; 255
 45c:	24 17       	cp	r18, r20
 45e:	35 07       	cpc	r19, r21
 460:	48 f0       	brcs	.+18     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 462:	4e 0f       	add	r20, r30
 464:	5f 1f       	adc	r21, r31
 466:	50 93 1f 02 	sts	0x021F, r21	; 0x80021f <__brkval+0x1>
 46a:	40 93 1e 02 	sts	0x021E, r20	; 0x80021e <__brkval>
 46e:	81 93       	st	Z+, r24
 470:	91 93       	st	Z+, r25
 472:	02 c0       	rjmp	.+4      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 474:	e0 e0       	ldi	r30, 0x00	; 0
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	cf 01       	movw	r24, r30
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	1f 91       	pop	r17
 480:	0f 91       	pop	r16
 482:	08 95       	ret

00000484 <free>:
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	00 97       	sbiw	r24, 0x00	; 0
 48a:	09 f4       	brne	.+2      	; 0x48e <free+0xa>
 48c:	81 c0       	rjmp	.+258    	; 0x590 <free+0x10c>
 48e:	fc 01       	movw	r30, r24
 490:	32 97       	sbiw	r30, 0x02	; 2
 492:	13 82       	std	Z+3, r1	; 0x03
 494:	12 82       	std	Z+2, r1	; 0x02
 496:	a0 91 20 02 	lds	r26, 0x0220	; 0x800220 <__flp>
 49a:	b0 91 21 02 	lds	r27, 0x0221	; 0x800221 <__flp+0x1>
 49e:	10 97       	sbiw	r26, 0x00	; 0
 4a0:	81 f4       	brne	.+32     	; 0x4c2 <free+0x3e>
 4a2:	20 81       	ld	r18, Z
 4a4:	31 81       	ldd	r19, Z+1	; 0x01
 4a6:	82 0f       	add	r24, r18
 4a8:	93 1f       	adc	r25, r19
 4aa:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <__brkval>
 4ae:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <__brkval+0x1>
 4b2:	28 17       	cp	r18, r24
 4b4:	39 07       	cpc	r19, r25
 4b6:	51 f5       	brne	.+84     	; 0x50c <free+0x88>
 4b8:	f0 93 1f 02 	sts	0x021F, r31	; 0x80021f <__brkval+0x1>
 4bc:	e0 93 1e 02 	sts	0x021E, r30	; 0x80021e <__brkval>
 4c0:	67 c0       	rjmp	.+206    	; 0x590 <free+0x10c>
 4c2:	ed 01       	movw	r28, r26
 4c4:	20 e0       	ldi	r18, 0x00	; 0
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	ce 17       	cp	r28, r30
 4ca:	df 07       	cpc	r29, r31
 4cc:	40 f4       	brcc	.+16     	; 0x4de <free+0x5a>
 4ce:	4a 81       	ldd	r20, Y+2	; 0x02
 4d0:	5b 81       	ldd	r21, Y+3	; 0x03
 4d2:	9e 01       	movw	r18, r28
 4d4:	41 15       	cp	r20, r1
 4d6:	51 05       	cpc	r21, r1
 4d8:	f1 f0       	breq	.+60     	; 0x516 <free+0x92>
 4da:	ea 01       	movw	r28, r20
 4dc:	f5 cf       	rjmp	.-22     	; 0x4c8 <free+0x44>
 4de:	d3 83       	std	Z+3, r29	; 0x03
 4e0:	c2 83       	std	Z+2, r28	; 0x02
 4e2:	40 81       	ld	r20, Z
 4e4:	51 81       	ldd	r21, Z+1	; 0x01
 4e6:	84 0f       	add	r24, r20
 4e8:	95 1f       	adc	r25, r21
 4ea:	c8 17       	cp	r28, r24
 4ec:	d9 07       	cpc	r29, r25
 4ee:	59 f4       	brne	.+22     	; 0x506 <free+0x82>
 4f0:	88 81       	ld	r24, Y
 4f2:	99 81       	ldd	r25, Y+1	; 0x01
 4f4:	84 0f       	add	r24, r20
 4f6:	95 1f       	adc	r25, r21
 4f8:	02 96       	adiw	r24, 0x02	; 2
 4fa:	91 83       	std	Z+1, r25	; 0x01
 4fc:	80 83       	st	Z, r24
 4fe:	8a 81       	ldd	r24, Y+2	; 0x02
 500:	9b 81       	ldd	r25, Y+3	; 0x03
 502:	93 83       	std	Z+3, r25	; 0x03
 504:	82 83       	std	Z+2, r24	; 0x02
 506:	21 15       	cp	r18, r1
 508:	31 05       	cpc	r19, r1
 50a:	29 f4       	brne	.+10     	; 0x516 <free+0x92>
 50c:	f0 93 21 02 	sts	0x0221, r31	; 0x800221 <__flp+0x1>
 510:	e0 93 20 02 	sts	0x0220, r30	; 0x800220 <__flp>
 514:	3d c0       	rjmp	.+122    	; 0x590 <free+0x10c>
 516:	e9 01       	movw	r28, r18
 518:	fb 83       	std	Y+3, r31	; 0x03
 51a:	ea 83       	std	Y+2, r30	; 0x02
 51c:	49 91       	ld	r20, Y+
 51e:	59 91       	ld	r21, Y+
 520:	c4 0f       	add	r28, r20
 522:	d5 1f       	adc	r29, r21
 524:	ec 17       	cp	r30, r28
 526:	fd 07       	cpc	r31, r29
 528:	61 f4       	brne	.+24     	; 0x542 <free+0xbe>
 52a:	80 81       	ld	r24, Z
 52c:	91 81       	ldd	r25, Z+1	; 0x01
 52e:	84 0f       	add	r24, r20
 530:	95 1f       	adc	r25, r21
 532:	02 96       	adiw	r24, 0x02	; 2
 534:	e9 01       	movw	r28, r18
 536:	99 83       	std	Y+1, r25	; 0x01
 538:	88 83       	st	Y, r24
 53a:	82 81       	ldd	r24, Z+2	; 0x02
 53c:	93 81       	ldd	r25, Z+3	; 0x03
 53e:	9b 83       	std	Y+3, r25	; 0x03
 540:	8a 83       	std	Y+2, r24	; 0x02
 542:	e0 e0       	ldi	r30, 0x00	; 0
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	12 96       	adiw	r26, 0x02	; 2
 548:	8d 91       	ld	r24, X+
 54a:	9c 91       	ld	r25, X
 54c:	13 97       	sbiw	r26, 0x03	; 3
 54e:	00 97       	sbiw	r24, 0x00	; 0
 550:	19 f0       	breq	.+6      	; 0x558 <free+0xd4>
 552:	fd 01       	movw	r30, r26
 554:	dc 01       	movw	r26, r24
 556:	f7 cf       	rjmp	.-18     	; 0x546 <free+0xc2>
 558:	8d 91       	ld	r24, X+
 55a:	9c 91       	ld	r25, X
 55c:	11 97       	sbiw	r26, 0x01	; 1
 55e:	9d 01       	movw	r18, r26
 560:	2e 5f       	subi	r18, 0xFE	; 254
 562:	3f 4f       	sbci	r19, 0xFF	; 255
 564:	82 0f       	add	r24, r18
 566:	93 1f       	adc	r25, r19
 568:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <__brkval>
 56c:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <__brkval+0x1>
 570:	28 17       	cp	r18, r24
 572:	39 07       	cpc	r19, r25
 574:	69 f4       	brne	.+26     	; 0x590 <free+0x10c>
 576:	30 97       	sbiw	r30, 0x00	; 0
 578:	29 f4       	brne	.+10     	; 0x584 <free+0x100>
 57a:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <__flp+0x1>
 57e:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <__flp>
 582:	02 c0       	rjmp	.+4      	; 0x588 <free+0x104>
 584:	13 82       	std	Z+3, r1	; 0x03
 586:	12 82       	std	Z+2, r1	; 0x02
 588:	b0 93 1f 02 	sts	0x021F, r27	; 0x80021f <__brkval+0x1>
 58c:	a0 93 1e 02 	sts	0x021E, r26	; 0x80021e <__brkval>
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	08 95       	ret

00000596 <_exit>:
 596:	f8 94       	cli

00000598 <__stop_program>:
 598:	ff cf       	rjmp	.-2      	; 0x598 <__stop_program>
